{
   AssetInFileStore = {
     
     // index class to use, default is er.indexing.ERIndex
     index = er.indexing.ERIndex;
     
     // url for the index files
     store = "file:///tmp/Document";
     
     // if the index should be double-buffered (currently unused)
     //    buffered = false|true;
     
     // entities in this index
     entities = (Asset);
     
     // properties to index, these are key paths off the objects
     // and are also used for the names of the index fields.
     // these don't need to be attributes or relationships
     // but can also be simple methods. In fact, if you have multiple
     // entities in your index, you will need to support a common set of 
     // these properties
     
     properties = {
         // if the index should be stored
         //   store = "NO|YES|COMPRESS";
         // if the index is tokenized
         //   index = "NO|TOKENIZED|UN_TOKENIZED|NO_NORMS";
         // no idea what this does. consult the lucene docs
         //   termVector = "NO|YES|WITH_POSITIONS|WITH_OFFSETS|WITH_POSITIONS_OFFSETS";
         // which analyzer class to use. For german stuff, you'll
         // use the org.apache.lucene.analysis.de.GermanAnalyzer.
         //   analyzer = com.foo.SomeAnalyzerClass;
         // optional formater for the value
         //   format = com.foo.SomeFormatClass;
         // optional number format for the value
         //   numberformat = "0";
         // optional date format for the value
         //   dateformat = "yyyy.mm.dd";
         
         // text attribute
	     content = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = WITH_POSITIONS;
         };
         
         // custom text attribute which will be stored in the index
	     genericInfo = {
	     	store = YES;
	     	index = TOKENIZED;
	     	termVector = WITH_POSITIONS;
         };
         
         // int number attribute
 	     userCount = {
	     	store = NO;
	     	index = UN_TOKENIZED;
	     	termVector = NO;
	     	numberformat = "0";
         };
        
         // decimal attribute
	     price = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
	     	numberformat = "0.00";
         };
        
         // date attribute
	     creationDate = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
	     	dateformat = "yyyy.mm.dd";
         };
        
         // related to one attribute
         assetGroup.name = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
		 };
        
        // related to many attribute
         tags.name = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
         };
     };
   };
   
   AssetInEOFStore = {
     
     // index class to use, default is er.indexing.ERIndex
     index = er.indexing.ERIndex;
     
     // url for the index files
     store = "AssetsInEOF";
     
     // if the index should be double-buffered (currently unused)
     //    buffered = false|true;
     
     // entities in this index
     entities = (Asset);
     
     // properties to index, these are key paths off the objects
     // and are also used for the names of the index fields.
     // these don't need to be attributes or relationships
     // but can also be simple methods. In fact, if you have multiple
     // entities in your index, you will need to support a common set of 
     // these properties
     
     properties = {
         // if the index should be stored
         //   store = "NO|YES|COMPRESS";
         // if the index is tokenized
         //   index = "NO|TOKENIZED|UN_TOKENIZED|NO_NORMS";
         // no idea what this does. consult the lucene docs
         //   termVector = "NO|YES|WITH_POSITIONS|WITH_OFFSETS|WITH_POSITIONS_OFFSETS";
         // which analyzer class to use. For german stuff, you'll
         // use the org.apache.lucene.analysis.de.GermanAnalyzer.
         //   analyzer = com.foo.SomeAnalyzerClass;
         // optional formater for the value
         //   format = com.foo.SomeFormatClass;
         // optional number format for the value
         //   numberformat = "0";
         // optional date format for the value
         //   dateformat = "yyyy.mm.dd";
         
         // text attribute
	     content = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = WITH_POSITIONS;
         };
         
         // custom text attribute which will be stored in the index
	     genericInfo = {
	     	store = YES;
	     	index = TOKENIZED;
	     	termVector = WITH_POSITIONS;
         };
         
         // int number attribute
 	     userCount = {
	     	store = NO;
	     	index = UN_TOKENIZED;
	     	termVector = NO;
	     	numberformat = "0";
         };
        
         // decimal attribute
	     price = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
	     	numberformat = "0.00";
         };
        
         // date attribute
	     creationDate = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
	     	dateformat = "yyyy.mm.dd";
         };
        
         // related to one attribute
         assetGroup.name = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
		 };
        
         // related to many attribute
         tags.name = {
	     	store = NO;
	     	index = TOKENIZED;
	     	termVector = NO;
         };
     };
   };
}