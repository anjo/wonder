{
    attributes = (
        {allowsNull = N; columnName = bio; name = bio; prototypeName = varcharLarge; }, 
        {
            allowsNull = N; 
            columnName = "bio-html"; 
            name = bioHtml; 
            prototypeName = varcharLarge; 
        }, 
        {
            allowsNull = N; 
            columnName = "created-at"; 
            name = createdAt; 
            prototypeName = dateTime; 
        }, 
        {
            allowsNull = N; 
            columnName = "display-name"; 
            name = displayName; 
            prototypeName = varcharLarge; 
        }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {
            allowsNull = N; 
            columnName = "last-login-at"; 
            name = lastLoginAt; 
            prototypeName = dateTime; 
        }, 
        {
            allowsNull = N; 
            columnName = "last-seen-at"; 
            name = lastSeenAt; 
            prototypeName = dateTime; 
        }, 
        {
            allowsNull = N; 
            columnName = login; 
            name = login; 
            prototypeName = varcharLarge; 
        }, 
        {
            allowsNull = N; 
            columnName = "posts-count"; 
            name = postsCount; 
            prototypeName = intNumber; 
        }, 
        {
            allowsNull = N; 
            columnName = "updated-at"; 
            name = updatedAt; 
            prototypeName = dateTime; 
        }, 
        {
            allowsNull = N; 
            columnName = website; 
            name = website; 
            prototypeName = varcharLarge; 
        }
    ); 
    attributesUsedForLocking = (
        bio, 
        bioHtml, 
        createdAt, 
        displayName, 
        id, 
        lastLoginAt, 
        lastSeenAt, 
        login, 
        postsCount, 
        updatedAt, 
        website
    ); 
    className = "se.caboo.beast.model.User"; 
    classProperties = (
        bio, 
        bioHtml, 
        createdAt, 
        displayName, 
        lastLoginAt, 
        lastSeenAt, 
        login, 
        posts, 
        postsCount, 
        repliedToTopics, 
        topics, 
        updatedAt, 
        website
    ); 
    externalName = "user,users"; 
    fetchSpecificationDictionary = {}; 
    name = User; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = Post; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = userID; sourceAttribute = id; }); 
            name = posts; 
        }, 
        {
            destination = Topic; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = repliedByID; sourceAttribute = id; }); 
            name = repliedToTopics; 
        }, 
        {
            destination = Topic; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = userID; sourceAttribute = id; }); 
            name = topics; 
        }
    ); 
}
