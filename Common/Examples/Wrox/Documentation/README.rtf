{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14740\viewh12280\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs24 \cf0 \
Welcome to the NetStruxr Case Study Example Application!\
\
The purpose of this application is to demonstrate a few of the concepts presented in the Case Study chapter (14) of Wrox's book Professional WebObjects for Java. Most of the ideas presented in the Case Study chapter draw on code that NetStruxr open sourced. NetStruxr's open-source projects are now part of Project Wonder located on sourceforge.net. \
 \
Installation and Setup\
	\
Step 1: The first step is to install the base frameworks (ERJarsJava, ERExtensionsJava and ERDirecttowebJava). Please see Project Wonder for help installing those frameworks. Also note \
\
Step 2: Build and install the ERMiniUglyLook framework. \
\
Step 3: Configure the database connection. The EOModel CaseStudy can be found in the NetStruxrCaseStudy application folder. By default the model is pointing to an OpenBase database running on the localhost named CaseStudy. After creating the database click EOModeler's sql button to create the database structure.\
\
Step 4: Build and run the NetstruxrCaseStudy application.\
\
Running the Application\
\
	When first running the application you need to create an account by clicking the "Signup" link. One fun bonus is to note how the validation exceptions are handled in the DirectToWeb pages, i.e. try hitting the Save button without entering anything on the Signup page. Once signed up you will be in the application which has a number of links on the home page to demonstrate some of the concepts presented in the chapter.  A short summary of the features are listed below.\
\
Note: If this application is run against WebObjects 5.0 you will see a bunch of EditingContext warning messages printed to the console.  These messages can be safely ignored as printing those messages when concurrent request handling is disabled is a bug in 5.0. The 5.1 release corrected this issue.\
\
Handling Exceptions\
\
	This is an easy one. From the home page click the link "Throw Exception" to throw an exception. While not very interesting itself, note that in the application console some extra information has been provided by the handleException() method of Application. \
\
Relevant classes:\
\
From NetstruxrCaseStudy\
Application - Implements handleException method\
\
From ERDirecttowebJava\
ERD2WListPageTemplate - Overrides descriptionForResponse to provide more information for statistic gathering than just the page name.\
\
LoginRequiredDirectAction\
	\
	The login required action has been implemented in this example application. To see this class in action from the login page click the "To make a try for the super secret page" link.  Note that you will be prompted to login to the system. After logging into the system you will be taken right to the Super Secret page, not the Home page as usual. However if you now click the link in the page wrapper at the top of the screen labeled "Super Secret Login Required DA" you will be taken again to the Super Secret page, this time without being required to login. Note that the bindings for the WOHyperlinks from both pages are the same. \
\
Relevant classes:\
\
From NetstruxrCaseStudy\
DirectAction - handles redirecting after a user logs into the system.\
LoginRequiredDirectAction - Any actions implemented in this class require that the user be logged into the application before proceeding.\
LoginPage - Holds onto any redirect action variables needed for after the user logs into the system.\
\
Log4j\
	The log4j configuration, CaseStudyConfiguration.config,  file can be found in the application folder (same place this file is found).  Open this file to examine the default log4j configuration of the application. Note that lines preceded by a # are not active. Feel free to try changing the configuration file at runtime and watch the logging behavior change before your eyes. For example, log into the application, note that the only log message you should see is the user login message from the Session's logging Logger.  Now log out and change the direct action Logger to the DEBUG level in the configuration file, i.e.\
\
log4j.logger.er.application.DirectAction=DEBUG\
\
Hit reload on the browser to reload and reconfigure the log4j system. Now again log into the system. This time you should see another log statement from the LoginRequiredDirectAction Logger. More information about log4j can be found at http://jakarta.apache.org. \
\
Relevant Classes:\
\
From ERMiniExtensions\
ERLog4j - Configures the log4j system given a configuration file.  Also enables rapid turnaround if caching is disabled via registering an observer with the FileNotification center.\
ERXFileNotificationCenter - Posts notifications to registered observers when files change.\
\
User Preferences\
	\
	The user preference system described in the chapter has been implemented in this application. To see this system in action, try changing the batch size number of a DirectToWeb list page or clicking on the sort toggle underneath a property name. Next log out of the system or restart the application. Note that when you return to the page above, the system has 'remembered' your last batch-size and sort orderings. \
\
Relevant Classes:\
\
From NetstruxrCaseStudy\
Application - Registers UserPreferenceHandlers at startup.\
User - Contains a static inner class UserPreference that handles the encoding/decoding of user preferences.\
UserPreferencesAssignment - D2W rule that vends a user preference object.\
\
From ERMiniExtensions\
ERSortOrder - posts notifications when sort orders change.\
ERBatchNavigationBar - posts notifications when batch sizes change.\
ERListPageTemplate - pulls batch sizes and sort orderings from an object vended from the d2wcontext.\
\
Multiple DirectToWeb Looks\
\
	Being able to switch D2W looks on the fly has been implemented in this application.  This simple example has two looks to choose from, the Default look (the page layout used for the signup page) and the Ugly look. Everything that has to do with the Ugly look can be found in the framework ERMiniUglyLook.  This framework holds the templates, components and rules that make the ugly look, well ugly. To switch the looks used for the current user, toggle the popup for DirectToWeb looks on the user home page. Change the look to Ugly and then navigate to one of the DirectToWeb pages from the links above, say Edit My Info.  Notice how the look of the page is well, Ugly. \
\
Relevant classes:\
\
From ERMiniExtensions\
ERInspectPageTemplate - Default look inspect page template.\
ERListPageTemplate - Default look list page template.\
DelayedKeyValueAssignment - Assignment used for making look dependent  upon the keypath session.look.\
\
From ERMiniUglyLook\
ERInspectPageTemplateUgly - Ugly look inspect page template.\
ERListPageTemplate - Ugly look list page template.\
\
Questions or comments, feel free to contact me at MaxMuller@mac.com\
}