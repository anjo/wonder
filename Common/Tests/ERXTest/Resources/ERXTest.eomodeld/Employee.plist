{
    attributes = (
        {
            allowsNull = Y; 
            columnName = address1; 
            name = address1; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = Y; 
            columnName = address2; 
            name = address2; 
            prototypeName = varchar255; 
        }, 
        {allowsNull = Y; columnName = city; name = city; prototypeName = varchar255; }, 
        {
            allowsNull = N; 
            columnName = companyID; 
            name = companyID; 
            prototypeName = id; 
        }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {columnName = manager; name = manager; prototypeName = boolean; }, 
        {columnName = name; name = name; prototypeName = varchar255; }, 
        {
            allowsNull = Y; 
            columnName = state; 
            name = state; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = Y; 
            columnName = zipcode; 
            name = zipcode; 
            prototypeName = varchar255; 
        }
    ); 
    attributesUsedForLocking = (address1, address2, city, companyID, id, manager, name, state, zipcode); 
    className = "er.erxtest.model.Employee"; 
    classProperties = (
        address1, 
        address2, 
        city, 
        company, 
        manager, 
        name, 
        paychecks, 
        roles, 
        state, 
        zipcode
    ); 
    externalName = Employee; 
    fetchSpecificationDictionary = {}; 
    name = Employee; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = Company; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = companyID; }); 
            name = company; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = EmployeeRole; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = employeeId; sourceAttribute = id; }); 
            name = employeeRoles; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Paycheck; 
            isMandatory = N; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = employeeID; sourceAttribute = id; }); 
            name = paychecks; 
        }, 
        {definition = "employeeRoles.role"; name = roles; }
    ); 
}
