package er.corebusinesslogic;
// Generated by the WOLips Templateengine Plug-in at 17.09.2006 22:39:35

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.directtoweb.D2W;
import com.webobjects.directtoweb.EditPageInterface;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.NSMutableArray;

import er.extensions.ERXEOControlUtilities;
import er.extensions.ERXStatelessComponent;
import er.extensions.ERXThreadStorage;

public class ERCDisplayHelpText extends ERXStatelessComponent {

    public ERCDisplayHelpText(WOContext context) {
        super(context);
    }

    public ERCHelpText helpText() {
    	ERCHelpText text = ERCHelpText.clazz.helpTextForKey(session().defaultEditingContext(), key());
    	if(!textsOnPage().containsObject(key())) {
    		textsOnPage().addObject(key());
    	}
    	return text;
    }

    public boolean showCreate() {
    	return showActions() && helpText() == null;
    }

    public boolean showEdit() {
    	return showActions() && helpText() != null;
    }
    
    public boolean showActions() {
    	return booleanValueForBinding("showActions", true);
    }
    
	private String prefix() {
		return (String) valueForBinding("prefix");
	}
    
	private String key() {
		String prefix = prefix();
		if(prefix() != null) {
			return prefix() + "." + valueForBinding("key");
		}
		return (String) valueForBinding("key");
	}
	
	public WOComponent createHelpText() {
		EditPageInterface page = D2W.factory().editPageForNewObjectWithEntityNamed(ERCHelpText.ENTITY, session());
		((WOComponent) page).takeValueForKeyPath(key(), "object." + ERCHelpText.Key.KEY);
		((WOComponent) page).takeValueForKeyPath(defaultValue(), "object." + ERCHelpText.Key.VALUE);
		page.setNextPage(context().page());
		return (WOComponent) page;
	}
	
	public WOComponent editHelpText() {
		EditPageInterface page = D2W.factory().editPageForEntityNamed(ERCHelpText.ENTITY, session());
		EOEnterpriseObject eo = ERXEOControlUtilities.editableInstanceOfObject(helpText(), false);
		page.setObject(eo);
		page.setNextPage(context().page());
		return (WOComponent) page;
	}
	
	public String defaultValue() {
		String value = (String) valueForBinding("defaultValue");
		if(value == null) {
			value = "";
		}
		return value;
	}

	public static NSMutableArray textsOnPage() {
		String key = "ERCDisplayHelpText.textsOnPage";
		NSMutableArray textsOnPage = (NSMutableArray) ERXThreadStorage.valueForKey(key);
		if(textsOnPage == null) {
			textsOnPage = new NSMutableArray();
			ERXThreadStorage.takeValueForKey(textsOnPage, key);
		}
		return textsOnPage;
	}
}