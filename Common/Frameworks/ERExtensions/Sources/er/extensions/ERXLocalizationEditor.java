package er.extensions;
// Generated by the WOLips Templateengine Plug-in at 11.01.2007 09:43:18

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSMutableSet;
import com.webobjects.foundation.NSPropertyListSerialization;
/**
 * Editor page for the localized files that are supplied in your settings. Note that the "save"
 * overwrites the files in the bundle, so be sure to have it pointed to the original file and not
 * the built bundle.
 * 
 *
 * @author ak
 */
public class ERXLocalizationEditor extends WOComponent {

	public String currentLanguage;
	public String currentFilename;
	public String currentFramework;
	public NSMutableDictionary data;
	public NSMutableDictionary entry;
	public String selectedFramework;
	public String selectedFilename;
	public String currentKey;
	public String UNSET = new String("***UNSET***");
	
    public ERXLocalizationEditor(WOContext context) {
        super(context);
    }

    public NSArray availableLanguages() {
    	return ERXLocalizer.availableLanguages();
    }

    public NSArray frameworkSearchPath() {
    	return ERXLocalizer.frameworkSearchPath();
    }

    public NSArray fileNamesToWatch() {
    	return ERXLocalizer.fileNamesToWatch();
    }
    
    public URL urlForCurrentFile() {
    	return ERXFileUtilities.pathURLForResourceNamed(currentFilename, currentFramework, new NSArray(currentLanguage));
    }
    
    public boolean fileExistsInLanguage() {
    	return urlForCurrentFile() != null;
    }
    
    public void editFramework() {
    	data = new NSMutableDictionary();
       	selectedFilename = currentFilename;
       	selectedFramework = currentFramework;
    	NSMutableSet allKeys = new NSMutableSet();
    	for (Enumeration languages = availableLanguages().objectEnumerator(); languages.hasMoreElements();) {
    		String language = (String) languages.nextElement();
			NSArray languageArray = new NSArray(language);
			URL url = ERXFileUtilities.pathURLForResourceNamed(currentFilename, currentFramework, languageArray);
			if(url != null) {
				NSDictionary dict = (NSDictionary)ERXExtensions.readPropertyListFromFileInFramework(currentFilename, currentFramework, languageArray);
				allKeys.addObjectsFromArray(dict.allKeys());
				for (Enumeration keys = dict.allKeys().objectEnumerator(); keys.hasMoreElements();) {
					String key = (String) keys.nextElement();
					NSMutableDictionary entry = (NSMutableDictionary) data.objectForKey(key);
					if(entry == null) {
						entry = new NSMutableDictionary();
						data.setObjectForKey(entry, key);
					}
					entry.setObjectForKey(dict.objectForKey(key), language);
				}
			}
		}
    	for (Enumeration keys = allKeys.objectEnumerator(); keys.hasMoreElements();) {
			String key = (String) keys.nextElement();
			NSMutableDictionary entry = (NSMutableDictionary) data.objectForKey(key);
			for (Enumeration languages = availableLanguages().objectEnumerator(); languages.hasMoreElements();) {
				String language = (String) languages.nextElement();
				if(entry.objectForKey(language) == null) {
					entry.setObjectForKey(UNSET, language);
				}
			}
		}
    }

    public boolean isLargeEntry() {
    	return currentValue().length() > 25 || currentValue().indexOf('\n') >= 0;
    }
    
    public String cellColor() {
    	return !hasCurrentValue() ?  "red" : null;
    }
    
    public String valueComponentName() {
    	return isLargeEntry() ? "WOText" : "WOTextField";
    }
    
    public void saveFramework() throws IOException {
    	for (Enumeration languages = availableLanguages().objectEnumerator(); languages.hasMoreElements();) {
     		String language = (String) languages.nextElement();
			NSArray languageArray = new NSArray(language);
			URL url = ERXFileUtilities.pathURLForResourceNamed(selectedFilename, selectedFramework, languageArray);
			NSMutableDictionary dict = new NSMutableDictionary();
     		for (Enumeration keys = data.keyEnumerator(); keys.hasMoreElements();) {
     			String key = (String) keys.nextElement();
				NSDictionary entry = (NSDictionary) data.objectForKey(key);
				Object value = entry.objectForKey(language);
				if(value != null && !value.equals(UNSET)) {
					dict.setObjectForKey(value, key);
				}
			}
     		String result = ERXStringUtilities.stringFromDictionary(dict);
     		NSDictionary newDict = (NSDictionary) NSPropertyListSerialization.propertyListFromString(result);
     		if(!newDict.equals(dict)) {
     			throw new IllegalStateException("Data wasn't equal when comparing before save");
     		} else {
     			ERXFileUtilities.stringToFile(result, new File(url.getFile()));
     		}
    	}
    }
    
    private Object currentValueObject() {
    	NSDictionary entry = (NSDictionary) data.objectForKey(currentKey);
    	Object result = null;
    	if(entry != null) {
    		result = entry.objectForKey(currentLanguage);
     	}
    	return result;
    }
    
    public boolean hasCurrentValue() {
    	return currentValueObject() != UNSET;
    }
    
    public String currentValue() {
    	NSMutableDictionary entry = (NSMutableDictionary) data.objectForKey(currentKey);
    	String result = null;
    	if(entry != null) {
    		Object item = entry.objectForKey(currentLanguage);
    		if (item instanceof String) {
				result = (String)item;
			} else {
	    		result = NSPropertyListSerialization.stringFromPropertyList(item);
			}
    	}
    	return result;
    }
	
    public void setCurrentValue(String value) {
    	NSMutableDictionary entry = (NSMutableDictionary) data.objectForKey(currentKey);
    	if(entry != null) {
    		Object item = entry.objectForKey(currentLanguage);
    		Object newValue;
    		if (item instanceof String) {
    			newValue = (String)value;
			} else {
				newValue = NSPropertyListSerialization.propertyListFromString(value);
			}
    		if(newValue ==null) {
    			newValue = UNSET;
    		}
    		entry.setObjectForKey(newValue, currentLanguage);
     	}
    }
}