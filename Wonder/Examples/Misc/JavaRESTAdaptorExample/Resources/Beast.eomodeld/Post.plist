{
    attributes = (
        {
            allowsNull = N; 
            columnName = body; 
            name = body; 
            prototypeName = varcharLarge; 
        }, 
        {
            allowsNull = N; 
            columnName = "body-html"; 
            name = bodyHtml; 
            prototypeName = varcharLarge; 
        }, 
        {
            allowsNull = N; 
            columnName = "created-at"; 
            name = createdAt; 
            prototypeName = dateTime; 
        }, 
        {allowsNull = N; columnName = "forum-id"; name = forumID; prototypeName = id; }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {allowsNull = N; columnName = "topic-id"; name = topicID; prototypeName = id; }, 
        {
            allowsNull = N; 
            columnName = "updated-at"; 
            name = updatedAt; 
            prototypeName = dateTime; 
        }, 
        {allowsNull = N; columnName = "user-id"; name = userID; prototypeName = id; }
    ); 
    attributesUsedForLocking = (body, bodyHtml, createdAt, forumID, id, topicID, updatedAt, userID); 
    className = "se.caboo.beast.model.Post"; 
    classProperties = (body, bodyHtml, createdAt, forum, topic, updatedAt, user); 
    externalName = "/users/[userID]/posts|/forums/[forumID]/posts|/forums/[forumID]/topics/[topicID]/posts,post,posts"; 
    fetchSpecificationDictionary = {}; 
    name = Post; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = Forum; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = forumID; }); 
            name = forum; 
        }, 
        {
            destination = Topic; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = topicID; }); 
            name = topic; 
        }, 
        {
            destination = User; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = userID; }); 
            name = user; 
        }
    ); 
}
