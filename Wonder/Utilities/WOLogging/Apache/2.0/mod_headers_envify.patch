diff -ru httpd-2.0.40/modules/metadata/mod_headers.c httpd-2.0.40-patched/modules/metadata/mod_headers.c
--- httpd-2.0.40/modules/metadata/mod_headers.c	2002-07-17 11:08:53.000000000 -0500
+++ httpd-2.0.40-patched/modules/metadata/mod_headers.c	2004-02-17 06:45:34.000000000 -0600
@@ -1,7 +1,7 @@
 /* ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
+ * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -128,7 +128,8 @@
     hdr_set = 's',              /* set (replace old value) */
     hdr_append = 'm',           /* append (merge into any old value) */
     hdr_unset = 'u',            /* unset header */
-    hdr_echo = 'e'              /* echo headers from request to response */
+    hdr_echo = 'e',             /* echo headers from request to response */
+    hdr_envify = 'n'            /* moves response header into environmental variable */
 } hdr_actions;
 
 typedef enum {
@@ -153,6 +154,7 @@
     char *header;
     apr_array_header_t *ta;   /* Array of format_tag structs */
     regex_t *regex;
+		char *envify_var;			/* Env variable used in Header envify to move the header to*/
     const char *condition_var;
 } header_entry;
 
@@ -192,7 +194,7 @@
 static const char *header_request_env_var(request_rec *r, char *a)
 {
     const char *s = apr_table_get(r->subprocess_env,a);
-		 
+
     if (s)
         return s;
     else
@@ -237,7 +239,7 @@
 
     s = *sa;
     while (*s && *s != '%') {
-	s++;
+        s++;
     }
     /*
      * This might allocate a few chars extra if there's a backslash
@@ -248,39 +250,39 @@
     d = tag->arg;
     s = *sa;
     while (*s && *s != '%') {
-	if (*s != '\\') {
-	    *d++ = *s++;
-	}
-	else {
-	    s++;
-	    switch (*s) {
-	    case '\\':
-		*d++ = '\\';
-		s++;
-		break;
-	    case 'r':
-		*d++ = '\r';
-		s++;
-		break;
-	    case 'n':
-		*d++ = '\n';
-		s++;
-		break;
-	    case 't':	
-		*d++ = '\t';
-		s++;
-		break;
-	    default:
-		/* copy verbatim */
-		*d++ = '\\';
-		/*
-		 * Allow the loop to deal with this *s in the normal
-		 * fashion so that it handles end of string etc.
-		 * properly.
-		 */
-		break;
-	    }
-	}
+        if (*s != '\\') {
+            *d++ = *s++;
+        }
+        else {
+            s++;
+            switch (*s) {
+            case '\\':
+                *d++ = '\\';
+                s++;
+                break;
+            case 'r':
+                *d++ = '\r';
+                s++;
+                break;
+            case 'n':
+                *d++ = '\n';
+                s++;
+                break;
+            case 't':	
+                *d++ = '\t';
+                s++;
+                break;
+            default:
+                /* copy verbatim */
+                *d++ = '\\';
+                /*
+                 * Allow the loop to deal with this *s in the normal
+                 * fashion so that it handles end of string etc.
+                 * properly.
+                 */
+                break;
+            }
+        }
     }
     *d = '\0';
 
@@ -292,7 +294,7 @@
 { 
     const char *s = *sa;
     const char * (*tag_handler)(request_rec *,char *);
-    
+
     /* Handle string literal/conditionals */
     if (*s != '%') {
         return parse_misc_string(p, tag, sa);
@@ -381,8 +383,10 @@
         new->action = hdr_unset;
     else if (!strcasecmp(action, "echo"))
         new->action = hdr_echo;
+    else if (!strcasecmp(action, "envify"))
+        new->action = hdr_envify;
     else
-        return "first argument must be add, set, append, unset or echo.";
+        return "first argument must be add, set, append, unset, echo or envify.";
 
     if (new->action == hdr_unset) {
         if (value)
@@ -410,14 +414,14 @@
         if (inout != hdr_out) {
             return "error: envclause (env=...) only valid on Header directive";
         }
-	if (strncasecmp(envclause, "env=", 4) != 0) {
-	    return "error: envclause should be in the form env=envar";
-	}
-	if ((envclause[4] == '\0')
-	    || ((envclause[4] == '!') && (envclause[5] == '\0'))) {
-	    return "error: missing environment variable name. envclause should be in the form env=envar ";
-	}
-	condition_var = apr_pstrdup(cmd->pool, &envclause[4]);
+        if (strncasecmp(envclause, "env=", 4) != 0) {
+            return "error: envclause should be in the form env=envar";
+        }
+        if ((envclause[4] == '\0')
+            || ((envclause[4] == '!') && (envclause[5] == '\0'))) {
+            return "error: missing environment variable name. envclause should be in the form env=envar ";
+        }
+        condition_var = apr_pstrdup(cmd->pool, &envclause[4]);
     }
     
     if ((colon = strchr(hdr, ':')))
@@ -426,6 +430,9 @@
     new->header = hdr;
     new->condition_var = condition_var;
 
+		if (new->action == hdr_envify)
+			new->envify_var = apr_pstrdup( cmd->pool, value );
+
     return parse_format_string(cmd->pool, new, value);
 }
 
@@ -528,6 +535,16 @@
         case hdr_unset:
             apr_table_unset(headers, hdr->header);
             break;
+				case hdr_envify:
+				{
+						char * header_value = NULL;
+						header_value = apr_table_get(headers, hdr->header );
+						if ( header_value != NULL ) {
+					    apr_table_set( r->subprocess_env, hdr->envify_var, header_value );
+							apr_table_unset(headers, hdr->header);
+						}
+						break;
+				}		
         case hdr_echo:
         {
             echo_do v;
@@ -549,7 +566,7 @@
                                                  &headers_module);
 
     if (serverconf->fixup_out->nelts || dirconf->fixup_out->nelts) {
-	ap_add_output_filter("FIXUP_HEADERS_OUT", NULL, r, r->connection);
+        ap_add_output_filter("FIXUP_HEADERS_OUT", NULL, r, r->connection);
     }
 }
 
@@ -562,7 +579,7 @@
                                                  &headers_module);
 
     ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, f->r->server,
-		 "headers: ap_headers_output_filter()");
+                 "headers: ap_headers_output_filter()");
 
     /* do the fixup */
     do_headers_fixup(f->r, hdr_out, serverconf->fixup_out);
