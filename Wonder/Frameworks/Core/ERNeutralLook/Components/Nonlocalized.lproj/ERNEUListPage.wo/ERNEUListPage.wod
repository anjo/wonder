AboveDisplayPropertyKeys: ERD2WExtraDisplayPropertyKeysComponent {
    localContext = d2wContext;
	extraPropertiesKey = "aboveDisplayPropertyKeys";
}

AreThereReferenceEO: ERXNonNullConditional {
	condition = referenceEOs;
}

AreThereReferenceEO2: ERXNonNullConditional {
	condition = referenceEOs;
}

AttributeCell: WOGenericContainer {
	align = d2wContext.justification;
	class = cssClassForPropertyKey;
	elementName = "td";
	style = inlineStyleDeclarationForPropertyKey;
	valign = "middle";
	width = d2wContext.width;
}

AttributeDisplay: ERXTimedSwitchComponent {
 	localContext = localContext;
 	object = object;
	statsKey = statsKeyForCurrentPropertyKey;
	WOComponentName = d2wContext.componentName;
	_componentUnroll = true;
	_unroll = true;
}

AttributeRepetition: WORepetition {
	item = d2wContext.propertyKey;
	list = d2wContext.displayPropertyKeys;
}

BackLink: WOHyperlink {
	action = backAction;
}

BackLink2: WOHyperlink {
	action = backAction;
}

Banner: WOImage {
	border = "0";
	filename = d2wContext.bannerFileName;
	framework = "JavaDirectToWeb";
}

BannerConditional: WOConditional {
	condition = showBanner;
}

BelowDisplayPropertyKeys: ERD2WExtraDisplayPropertyKeysComponent {
	localContext = d2wContext;
	extraPropertiesKey = "belowDisplayPropertyKeys";
}

ColSpanTD: WOGenericContainer {
	elementName = "td";
	bgcolor = "#ffffff";
	colspan = colSpan;
}

ColumnLabelRepetition: WORepetition {
	item = d2wContext.propertyKey;
	list = d2wContext.displayPropertyKeys;
}

Conditional1: WOConditional {
	condition = isEntityEditable;
}

DisplayBottomBatchNavigationConditional: WOConditional {
	condition = d2wContext.displayBottomBatchNavigation;
}

ERXNonNullConditional1: ERXNonNullConditional {
	condition = d2wContext.editButtonComponentName;
	negate = true;
}

ERXNonNullConditional2: ERXNonNullConditional {
	condition = d2wContext.editButtonComponentName;
}

EditButton: ERDEditButton {
	d2wContext = d2wContext;
	object = object;
}

EmptyMessageComponent: WOSwitchComponent {
	WOComponentName = d2wContext.emptyListComponentName;
	d2wContext = d2wContext;
}

EntityRepetition: WORepetition {
	item = object;
	list = displayGroup.displayedObjects;
}

ExcelExportButton: WOSwitchComponent {
	WOComponentName = d2wContext.excelExportButtonComponentName;
	displayGroup = displayGroup;
	d2wContext = d2wContext;
}

ExcelExportButton2: WOSwitchComponent {
	WOComponentName = d2wContext.excelExportButtonComponentName;
	displayGroup = displayGroup;
	d2wContext = d2wContext;
}

FilterDisplayGroupButton: ERDFilterDisplayGroupButton {
	allowsFiltering = d2wContext.allowsFiltering;
	d2wContext = d2wContext;
	displayGroup = displayGroup;
}

FilterDisplayGroupButton2: ERDFilterDisplayGroupButton {
	d2wContext = d2wContext;
	displayGroup = displayGroup;
}

Generic1: WOGenericContainer {
	BGCOLOR = referenceEO.backgroundColor; //VALID
	elementName = "td";
}

Generic2: WOGenericContainer {
	BGCOLOR = referenceEO.backgroundColor; //VALID
	elementName = "td";
}

Help: ERDDebuggingHelp {
	d2wContext = d2wContext;
}

IfPropertyKeyIsNotOmitted: WOConditional {
	condition = isKeyOmitted;
	negate = true;
}

InlineMetricsForPropertyKey: WOString {
	escapeHTML = false;
	value = latestEntryForCurrentPropertyKey.latestDuration;
}

InspectButton: ERDInspectButton {
	d2wContext = d2wContext;
	object = object;
}

IsEntityNotWritable: WOConditional {
	_unroll = true;
	condition = isEntityInspectable;
}

IsEntityWritable: WOConditional {
	_unroll = true;
	condition = isEntityReadOnly;
	negate = true;
}

IsEntityWritable2: WOConditional {
	_unroll = true;
	condition = d2wContext.isEntityDeletable;
}

IsGenericExportButtonKnown: WOConditional {
	condition = d2wContext.excelExportButtonComponentName;
}

IsGenericExportButtonKnown2: WOConditional {
	condition = d2wContext.excelExportButtonComponentName;
}

IsListing: WOConditional {
	_unroll = true;
	condition = isSelecting;
	negate = true;
}

IsListing2: WOConditional {
	_unroll = true;
	condition = isSelecting;
	negate = true;
}

IsPropertySortable: WOConditional {
	_unroll = true;
	condition = d2wContext.propertyIsSortable;
}

IsSelecting: WOConditional {
	_unroll = true;
	condition = isSelecting;
}

ListEmpty: WOConditional {
	condition = isListEmpty;
}

ListNotEmpty: WOConditional {
	condition = isListEmpty;
	negate = true;
}

ListTable: WOGenericContainer {
	_unroll = true;
	bgcolor = d2wContext.backgroundColorForTable;
	border = 0;
	cellpadding = 1;
	cellspacing = 0;
	class = cssClassForPageContainerElement;
	elementName = "table";
}

ListTableHeaderRow: WOGenericContainer {
	_unroll = true;
	bgcolor = "#ffffff";
	elementName = "tr";
}

ListTableRow: WOGenericContainer {
	_unroll = true;
	elementName = "tr";
	BGCOLOR = colorForRow;
}

MetricsDurationForCurrentPropertyKey: WOString {
	value = aggregateEventDurationForCurrentPropertyKey;
}

NavBar: WOSwitchComponent {
    WOComponentName = d2wContext.batchNavigationBarComponentName;
	bgcolor = backgroundColorForTable;
	displayGroup = displayGroup;
	objectName = d2wContext.displayNameForEntity;
	textColor = d2wContext.textColor;
	width = 550;
       	 d2wContext = d2wContext;
}

NavBar2: WOSwitchComponent {
    WOComponentName = d2wContext.batchNavigationBarComponentName;
	bgcolor = backgroundColorForTable;
	displayGroup = displayGroup;
	objectName = d2wContext.displayNameForEntity;
	textColor = d2wContext.textColor;
       	 d2wContext = d2wContext;
}

PageMetricsSummary: ERXStatsSummary {
	aggregateStats = statsForPage;
}

PageWrapper: WOSwitchComponent {
	WOComponentName = pageWrapperName;
	_componentUnroll = true;
	_unroll = true;
}

PropertyNameComponentGenericContainer: WOGenericContainer {
	class = cssClassForPropertyName;
	elementName = "th";
	nowrap = "nowrap";
	style = inlineStyleDeclarationForPropertyName;
	valign = "bottom";
}

PropertyNameSwitchComponent: WOSwitchComponent {
	WOComponentName = d2wContext.propertyNameComponentName;
	localContext = d2wContext;
}

Repetition1: WORepetition {
	item = referenceEO;
	list = referenceEOs;
}

Repetition2: WORepetition {
	item = referenceEO;
	list = referenceEOs;
}

ReturnButton: WOImage {
	alt = "Returns to the previous page";
	border = "0";
	filename = "ReturnMetalBtn.gif";
	framework = "JavaDirectToWeb";
	height = "31";
	name = "Returns to the previous page";
	width = "88";
}

ReturnButton2: WOImage {
	alt = "Returns to the previous page";
	border = "0";
	filename = "ReturnMetalBtn.gif";
	framework = "JavaDirectToWeb";
	height = "31";
	name = "Returns to the previous page";
	width = "88";
}

SelectEO: WOHyperlink {
	action = selectObjectAction;
}

SelectImage: WOImage {
	alt = "Select that Object";
	border = "0";
	filename = "SelectMetalSmBtn.gif";
	framework = "JavaDirectToWeb";
	height = "21";
	name = "Select that Object";
	width = "51";
}

ShouldDisplayDetailedPageMetrics: WOConditional {
	condition = shouldDisplayDetailedPageMetrics;
}

ShouldDisplayMetricsSummary: WOConditional {
	condition = shouldDisplayPageMetricsSummary;
}

ShowBatchNavigationConditional: WOConditional {
	condition = shouldShowBatchNavigation;
}

ShowCancel: WOConditional {
	condition = showCancel;
}

ShowCancel2: WOConditional {
	condition = showCancel;
}

SortOrder: ERXSortOrder {
	d2wContext = d2wContext;
	displayGroup = displayGroup;
	displayKey = d2wContext.displayNameForProperty;
	key = d2wContext.sortKeyForList;
}

String1: WOString {
	value = referenceEO.name; //VALID
}

String2: WOString {
	value = referenceEO.name; //VALID
}

SwitchComponent2: WOSwitchComponent {
	WOComponentName = d2wContext.editButtonComponentName;
	d2wContext = d2wContext;
	object = object;
}

Trash: ERDTrashcan {
	d2wContext = d2wContext;
	dataSource = dataSource;
	object = object;
}
