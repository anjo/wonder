// Generated by the WebObjects Wizard

import com.webobjects.foundation.*;
import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import java.io.*;
import Person;
import com.webobjects.eoaccess.*;
import com.uw.shared.*;

public class Application extends WOApplication { 


    public NSDictionary settings;	// dictionary of app settings read from Properties
    public NSMutableArray yearsCache;

    public static void main(String argv[]) {
        WOApplication.main(argv, Application.class);
    }

    public WOResponse handleSessionRestorationErrorInContext(WOContext aContext) {
        return pageWithName("Main",aContext).generateResponse();
    }

    public NSTimestamp todaysDate() {
        return new NSTimestamp();
    }


    // overridden because sometimes there are malformed cookies that throw exceptions in WO 5.1.x
    // it can be commented out in 5.2
    public WOResponse dispatchRequest(WORequest aRequest) {
        /* this piece of code solves several problems with cookies in 5.1.x
        1. does not include cookies that have multiple = signs
        2. does not include cookies that have no cookie value
        3. ensures cookie keys are unique */

        String cHeader = aRequest.headerForKey("cookie");

        if (cHeader!=null) {


            // we use a dictionary to ensure that all cookie keys are unique
            NSMutableDictionary cookieDictionary = new NSMutableDictionary();

            // parse and reconstruct cookie header removing any malformed cookies
            StringReader stringReader = new StringReader(cHeader);
            StreamTokenizer tokenizer = new StreamTokenizer(stringReader);

            // set up the tokenizer
            tokenizer.resetSyntax();
            tokenizer.wordChars(' ','~');
            tokenizer.whitespaceChars(';',';');
            tokenizer.eolIsSignificant(true);


            int token=0;
            try {
                token = tokenizer.nextToken();
            }
            catch (Exception e) {
                System.out.println(e);
                return null;
            }

            // continue to read tokens until the End of File is encountered
            while (token == tokenizer.TT_WORD) {

                try {
                    String currentCookie = tokenizer.sval.trim();
                    
                    if (currentCookie.indexOf('=')==currentCookie.lastIndexOf('=',currentCookie.length())) {
                        int equalsIndex = currentCookie.indexOf('=');
                        String cookieHeader = currentCookie.substring(0,equalsIndex).trim();
                        String cookieValue = currentCookie.substring(equalsIndex+1,currentCookie.length()).trim();

                        if (cookieValue.length()>0) {
                            cookieDictionary.takeValueForKey(cookieValue,cookieHeader);
                        }
                    }

                    token = tokenizer.nextToken();

                }
                catch (Exception e) {
                    System.out.println(e);
                    return null;
                }
            }

            String cookieString = cookieDictionary.toString();
            aRequest.setHeader(cookieString.substring(1,cookieString.length()-1),"cookie");

        }
        return super.dispatchRequest(aRequest);
    }


    /** Constructor */
    public Application() {
        super();
        // this.setCachingEnabled(true);

        // Cause the app to present the first page via the default directaction.  This is more efficient than overriding pageForName.
        setDefaultRequestHandler(requestHandlerForKey(directActionRequestHandlerKey()));

        ModelHelper.sharedInstance().installEOModelAddedNotificationHandler();

        try {
            String settingsDictionaryName = System.getProperty("SettingsDictionaryName");
            if(settingsDictionaryName == null)
                settingsDictionaryName = "MyLiveSettings";
            System.out.println(settingsDictionaryName);
            
            settings = NSPropertyListSerialization.dictionaryForString(System.getProperty(settingsDictionaryName));
            setSMTPHost((String) settings.objectForKey("SMTPHost"));

            EOEditingContext newContext = new EOEditingContext();
            NSArray users = EOUtilities.objectsForEntityNamed(newContext, "Person");

            if (users.count()==0) {
                Person person = new Person(newContext,null);
                person.setName("Default Adminstrator");
                person.setPassword("admin");
                person.setType("Admin");
                person.setUserID("Admin");


                try {
                    newContext.saveChanges();
                }
                catch (Exception e) {
                    System.out.println ("Cannot add admin user");
                    System.out.println (e);
                }
            }

        }
        catch (Exception e) {
            System.out.println(e);
        }

    }

    public NSMutableArray years() {

        if (yearsCache==null) {
            yearsCache = new NSMutableArray();
            NSArray rawArray = EOUtilities.objectsWithFetchSpecificationAndBindings(new EOEditingContext(), "YearlyData", "fetchYears", null);
            for (int i=0; i<rawArray.count(); i++) yearsCache.addObject(((NSDictionary) rawArray.objectAtIndex(i)).objectForKey("year"));
        }
        return yearsCache;
    }


}
