package er.ajax;
// Generated by the WOLips Templateengine Plug-in at 26.03.2006 00:34:08

import java.util.Enumeration;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

/**
 * Autocomplete field similar to what google has. You bind a value and a method that returns a list
 * and it hits the server on each keystroke and displays the results.
 * @author ak
 *
 */
public class AjaxAutoComplete extends AjaxComponent {

    public String divName;
    public String fieldName;
    
    public AjaxAutoComplete(WOContext context) {
        super(context);
    }
    
    /**
     * Overridden to set the IDs for the field and the div tag.
     */
    public void awake() {
        super.awake();
        divName = scriptBaseName() + "_div";
        fieldName = scriptBaseName() + "_field";
    }

    /**
     * Overridden because the component is stateless
     */
    public boolean isStateless() {
        return true;
    }

    /**
     * Overridden because the component does not synch with the bindings.
     */
    public boolean synchronizesVariablesWithBindings() {
        return false;
    }
   
    protected NSDictionary createAjaxOptions() {
      NSMutableArray ajaxOptionsArray = new NSMutableArray();
      ajaxOptionsArray.addObject(new AjaxOption("tokens", AjaxOption.STRING_ARRAY));
      ajaxOptionsArray.addObject(new AjaxOption("frequency", AjaxOption.NUMBER));
      ajaxOptionsArray.addObject(new AjaxOption("minChars", AjaxOption.NUMBER));
      ajaxOptionsArray.addObject(new AjaxOption("indicator", AjaxOption.SCRIPT));
      ajaxOptionsArray.addObject(new AjaxOption("updateElement", AjaxOption.SCRIPT));
      ajaxOptionsArray.addObject(new AjaxOption("afterUpdateElement", AjaxOption.SCRIPT));
      NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, this);
      return options;
    }
   
    /**
     * Overridden to add the initialization javascript for the auto completer.
     */
    public void appendToResponse(WOResponse res, WOContext ctx) {
        super.appendToResponse(res, ctx);
        String actionUrl = context().componentActionURL();
        res.appendContentString("<script type = \"text/javascript\" language = \"javascript\"><!--\n");
        res.appendContentString("new Ajax.Autocompleter('"+fieldName+"', '"+divName+"', '"+actionUrl+"', ");
        AjaxOptions.appendToResponse(createAjaxOptions(), res, ctx);
        res.appendContentString(");");
        res.appendContentString("//--></script>");
    }

    /**
     * Adds all required resources.
     */
    protected void addRequiredWebResources(WOResponse res) {
        addScriptResourceInHead(res, "prototype.js");
        addScriptResourceInHead(res, "scriptaculous.js");
        addScriptResourceInHead(res, "effects.js");
        addScriptResourceInHead(res, "builder.js");
        addScriptResourceInHead(res, "dragdrop.js");
        addScriptResourceInHead(res, "controls.js");
    }

    /**
     * Handles the Ajax request. Checks for the form value if the edit field,
     * pushes it up to the parent and pull the "list" binding. The parent is
     * responsible for returning a list with some items that match the current value.
     */
     protected WOActionResults handleRequest(WORequest request, WOContext context) {
        String inputString = request.contentString();
        String fieldValue = context.request().stringFormValueForKey(fieldName);
        setValueForBinding(fieldValue, "value");
        NSArray values = (NSArray) valueForBinding("list");
        WOElement child = _childTemplate();
        boolean hasItem = hasBinding("item");
        WOResponse response = AjaxUtils.createResponse(hasItem ? null : context);
        response.appendContentString("<ul>");
        for(Enumeration e = values.objectEnumerator(); e.hasMoreElements();) {
            response.appendContentString("<li>");
            Object value = e.nextElement();
            if(hasItem && child != null) {
                setValueForBinding(value, "item");
                context._setCurrentComponent(parent());
                child.appendToResponse(response, context);
                context._setCurrentComponent(this);
            } else {
                response.appendContentString(value.toString());
            }
            response.appendContentString("</li>");
        }
        response.appendContentString("</ul>");
        return response;
     }
}