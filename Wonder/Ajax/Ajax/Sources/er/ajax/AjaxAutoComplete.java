package er.ajax;
// Generated by the WOLips Templateengine Plug-in at 26.03.2006 00:34:08

import java.util.Enumeration;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

/**
 * Autocompleting combo-box similar to Google suggest.<br/>
 * 
 * This is a component that look like a text field, where when you start
 * entering value, it start giving you a menu of options related to what you
 * type. Think about the auto-completion feature of many IDE (XCode / Eclipse)
 * inside a textField.<br/> <br/> 
 * The scriptaculous library has 2 version of the autocompleter combo-box : 
 * a local version and an ajax version.
 * 
 * <h3>Local</h3>
 * The local version hold the list of values all in memory (client-side), there
 * is no interaction. If the number of elements is big enough to be in a
 * WOPopUP, then this variant is well suited for you. If the list of element to
 * show is too big, then you might prefer the 'ajax' version.<br/> You have to
 * tell the component that it is local (by default it is 'ajax' type) using the
 * <code>isLocal</code> binding. Then the <code>list</code> binding will
 * need to provide all the objects needed to be found. Filtering of the list as
 * you type will be done client-side, all javascript.
 * 
 * <h3>Ajax</h3>
 * Autocomplete field similar to what google has. You bind a value and a method
 * that returns a list and it hits the server on each keystroke and displays the
 * results.
 * 
 * @binding list bound to a method that should return the whole list of object
 *          to be displayed. When used in an Ajax context, the component will
 *          push first to the <cite>value</cite> binding, giving you the chance
 *          to narrow the list of elements displayed. When used in a Local
 *          context, the list should contain all possible objects. the list will
 *          be filtered by the scriptaculous engine.
 * @binding value string that will hold the text entered in the field. It is
 *          continiously updated.
 * @binding item pushed and pulled the current element of the list. This can be
 *          used to customized the string representation (in conjuction with the
 *          <cite>displayString</cite> binding) of the object.
 * @binding displayString optional custom string representation of the current
 *          element.
 * @binding isLocal boolean indicating if you want the list to be completely
 *          client-side. Binding a true value, would mean that the list will
 *          filtered on the client.
 * @binding token
 * @binding frequency Look at the scriptaculous documentation.
 * @binding minChars Look at the scriptaculous documentation.
 * @binding indicator Look at the scriptaculous documentation.
 * @binding updateElement Look at the scriptaculous documentation.
 * @binding afterUpdateElement Look at the scriptaculous documentation.
 * @binding fullSearch Look at the scriptaculous documentation.
 * @binding partialSearch Look at the scriptaculous documentation.
 * 
 * @author ak
 */
public class AjaxAutoComplete extends AjaxComponent {

    public String divName;
    public String fieldName;

    public AjaxAutoComplete(WOContext context) {
        super(context);
    }
    
    /**
     * Overridden to set the IDs for the field and the div tag.
     */
    public void awake() {
        super.awake();
        divName = safeElementID() + "_div";
        fieldName = safeElementID() + "_field";
    }

    /**
     * Overridden because the component is stateless
     */
    public boolean isStateless() {
        return true;
    }

    /**
     * Overridden because the component does not synch with the bindings.
     */
    public boolean synchronizesVariablesWithBindings() {
        return false;
    }
   
    protected NSDictionary createAjaxOptions() {
      NSMutableArray ajaxOptionsArray = new NSMutableArray();
      ajaxOptionsArray.addObject(new AjaxOption("tokens", AjaxOption.STRING_ARRAY));
      ajaxOptionsArray.addObject(new AjaxOption("frequency", AjaxOption.NUMBER));
      ajaxOptionsArray.addObject(new AjaxOption("minChars", AjaxOption.NUMBER));
      ajaxOptionsArray.addObject(new AjaxOption("indicator", AjaxOption.SCRIPT));
      ajaxOptionsArray.addObject(new AjaxOption("updateElement", AjaxOption.SCRIPT));
      ajaxOptionsArray.addObject(new AjaxOption("afterUpdateElement", AjaxOption.SCRIPT));
	  ajaxOptionsArray.addObject(new AjaxOption("fullSearch", AjaxOption.BOOLEAN));
	  ajaxOptionsArray.addObject(new AjaxOption("partialSearch", AjaxOption.BOOLEAN));
	  ajaxOptionsArray.addObject(new AjaxOption("defaultValue", AjaxOption.STRING));
      NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, this);
      return options;
    }
   
    /**
     * Overridden to add the initialization javascript for the auto completer.
     */
    public void appendToResponse(WOResponse res, WOContext ctx) {
        super.appendToResponse(res, ctx);
		boolean isLocal = hasBinding("isLocal") && ((Boolean) valueForBinding("isLocal")).booleanValue();
		if (isLocal) {
			StringBuffer str = new StringBuffer();
			str.append("<script type=\"text/javascript\">\n// <![CDATA[\n");
			str.append("new Autocompleter.Local('");
			str.append(fieldName);
			str.append("','");
			str.append(divName);
			str.append("',");
			str.append("new Array(");
			NSArray list = (NSArray) valueForBinding("list");
			int max = list.count();
			String cnt = "";
			boolean hasItem = hasBinding("item");
			for (int i = 0; i < max; i++) {
				Object ds = list.objectAtIndex(i);
				if (i > 0) {
					str.append(",");
				}
				str.append("\n\"");
				if (hasItem) {
                    setValueForBinding(ds, "item");
             	}
            	Object displayValue = valueForBinding("displayString", valueForBinding("item", ds));
				str.append(displayValue.toString());
				// TODO: We should escape the javascript string delimiter (") to keep the javascript interpreter happy.
				//str.append(displayValue.toString().replaceAll("\"", "\\\\\\\\\"")); // doesn't work

				str.append(cnt);
				str.append("\"");
			}
			str.append("),");
			AjaxOptions.appendToBuffer(createAjaxOptions(), str, ctx);
			str.append(");\n// ]]>\n</script>\n");
			res.appendContentString(String.valueOf(str));
		} else {
			String actionUrl = AjaxUtils.ajaxComponentActionUrl(ctx);
      AjaxUtils.appendScriptHeader(res);
			res.appendContentString("new Ajax.Autocompleter('"+fieldName+"', '"+divName+"', '"+actionUrl+"', ");
			AjaxOptions.appendToResponse(createAjaxOptions(), res, ctx);
			res.appendContentString(");");
      AjaxUtils.appendScriptFooter(res);
		}
    }

    /**
     * Adds all required resources.
     */
    protected void addRequiredWebResources(WOResponse res) {
        addScriptResourceInHead(res, "prototype.js");
        addScriptResourceInHead(res, "scriptaculous.js");
        addScriptResourceInHead(res, "effects.js");
        addScriptResourceInHead(res, "builder.js");
        addScriptResourceInHead(res, "dragdrop.js");
        addScriptResourceInHead(res, "controls.js");
        addScriptResourceInHead(res, "wonder.js");
    }

    /**
     * Handles the Ajax request. Checks for the form value in the edit field,
     * pushes it up to the parent and pulls the "list" binding. The parent is
     * responsible for returning a list with some items that match the current value.
     */
     public WOActionResults handleRequest(WORequest request, WOContext context) {
        // String inputString = request.contentString();
        String fieldValue = context.request().stringFormValueForKey(fieldName);
        setValueForBinding(fieldValue, "value");
        NSArray values = (NSArray) valueForBinding("list");
        WOElement child = _childTemplate();
        boolean hasItem = hasBinding("item");
        WOResponse response = AjaxUtils.createResponse(request, context);
        response.appendContentString("<ul>");
        int maxItems = ((Integer) valueForBinding("maxItems", new Integer(50))).intValue();
        int itemsCount = 0;
        for(Enumeration e = values.objectEnumerator(); e.hasMoreElements() && itemsCount++ < maxItems;) {
            response.appendContentString("<li>");
            Object value = e.nextElement();
            if(hasItem && child != null) {
                setValueForBinding(value, "item");
                context._setCurrentComponent(parent());
                child.appendToResponse(response, context);
                context._setCurrentComponent(this);
            } else {
            	if(hasItem) {
                    setValueForBinding(value, "item");
             	}
            	Object displayValue = valueForBinding("displayString", valueForBinding("item", value));
            	String displayString = displayValue.toString();
                response.appendContentString(displayString);
            }
            response.appendContentString("</li>");
        }
        response.appendContentString("</ul>");
        return response;
     }
}
