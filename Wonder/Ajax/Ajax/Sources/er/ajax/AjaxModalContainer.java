package er.ajax;

//Generated by the WOLips Templateengine Plug-in at 11.08.2006 13:19:58
//http://jquery.com/demo/thickbox/

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;
/**
 * Shows a link and wraps an area that is later presented as a modal window.
 * @binding label label for the link
 * @binding class class for the link
 * @binding style style for the link
 * @binding value value for the link ??
 * @binding id id for the link ??
 * @binding href when it is bound, the content of the url will be fetched
 * @binding action when it is bound, the content of the url will be fetched
 *  *
 * @author ak
 */
public class AjaxModalContainer extends AjaxDynamicElement {

    public AjaxModalContainer(String name, NSDictionary associations, WOElement children) {
        super(name, associations, children);
    }

    public WOActionResults invokeAction(WORequest worequest, WOContext wocontext) {
        WOAssociation action = (WOAssociation) associations().objectForKey("action");
        if(action != null && wocontext.elementID().equals(wocontext.senderID())) {
            return (WOActionResults) action.valueInComponent(wocontext.component());
        }
        return super.invokeAction(worequest, wocontext);
    }

    public void appendToResponse(WOResponse response, WOContext context) {
        WOComponent component = context.component();
        String divID=AjaxUtils.toSafeElementID(context.elementID());
        response.appendContentString("<a ");
        String href = (String) valueForBinding("href", component);
        if(href == null) {
            if(associations().objectForKey("action") != null) {
            	// don't use ajax request handler here
                href = context.componentActionURL();
            }
            if(href == null) {
                href = "#" + divID;
            }
        }
        appendTagAttributeToResponse(response, "href", href);
		String relAttributeValue = "ibox";
		Object height = valueForBinding("height", component);
		Object width = valueForBinding("width", component);
		if (height != null) {
			relAttributeValue += "&height=" + height;
		}
		if (width != null) {
			relAttributeValue += "&width=" + width;
		}
		response._appendTagAttributeAndValue("rel", relAttributeValue, false); // don't escape the ampersands
        appendTagAttributeToResponse(response, "title", valueForBinding("title", component));
        appendTagAttributeToResponse(response, "value", valueForBinding("value", component));
        appendTagAttributeToResponse(response, "class", valueForBinding("class", component));
        appendTagAttributeToResponse(response, "style", valueForBinding("style", component));
        appendTagAttributeToResponse(response, "id", valueForBinding("id", component));
        response.appendContentString(">");
        response.appendContentString((String) valueForBinding("label",component));
        response.appendContentString("</a><div ");
        appendTagAttributeToResponse(response, "id", divID);
        appendTagAttributeToResponse(response, "style", "display:none;");
        response.appendContentString(">");
        appendChildrenToResponse(response, context);
        response.appendContentString("</div>");
        super.appendToResponse(response, context);
    }

    protected void addRequiredWebResources(WOResponse response, WOContext context) {
        addScriptResourceInHead(context, response, "ibox.js");
        addStylesheetResourceInHead(context, response, "ibox.css");
    }

    public WOActionResults handleRequest(WORequest request, WOContext context) {
        return null;
    }
}
