package er.ajax;
//Generated by the WOLips Templateengine Plug-in at 27.03.2006 21:36:50

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

/**
 * observeFieldID requires ERExtensions, specifically ERXWOForm
 */
public class AjaxUpdateContainer extends AjaxDynamicElement {

    public AjaxUpdateContainer(String name, NSDictionary associations, WOElement children) {
        super(name, associations, children);
    }

    /**
     * Adds all required resources.
     */
    protected void addRequiredWebResources(WOResponse response, WOContext context) {
        addScriptResourceInHead(context, response, "scriptaculous.js");
        addScriptResourceInHead(context, response, "prototype.js");
    }

    public NSDictionary createAjaxOptions(WOComponent component) {
        NSMutableArray ajaxOptionsArray = new NSMutableArray();
        ajaxOptionsArray.addObject(new AjaxOption("frequency", AjaxOption.NUMBER));
        ajaxOptionsArray.addObject(new AjaxOption("decay", AjaxOption.NUMBER));
        ajaxOptionsArray.addObject(new AjaxOption("onLoading", AjaxOption.SCRIPT));
        ajaxOptionsArray.addObject(new AjaxOption("onComplete", AjaxOption.SCRIPT));
        ajaxOptionsArray.addObject(new AjaxOption("onSuccess", AjaxOption.SCRIPT));
        ajaxOptionsArray.addObject(new AjaxOption("onFailure", AjaxOption.SCRIPT));
        ajaxOptionsArray.addObject(new AjaxOption("onException", AjaxOption.SCRIPT));
        ajaxOptionsArray.addObject(new AjaxOption("insertion", AjaxOption.STRING));
        ajaxOptionsArray.addObject(new AjaxOption("evalScripts", AjaxOption.BOOLEAN));
        NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, component, associations());
        return options;
    }

    public void appendToResponse(WOResponse response, WOContext context) {
        WOComponent component = context.component();
        String elementName = (String) valueForBinding("elementName", "span", component);
        String id = containerID(context);
        response.appendContentString("<" + elementName + " ");
        appendTagAttributeToResponse(response, "id", id);
        appendTagAttributeToResponse(response, "class", valueForBinding("class", component));
        appendTagAttributeToResponse(response, "updateUrl", context.componentActionURL());
        appendTagAttributeToResponse(response, "woElementID", context.elementID());
        response.appendContentString(">");
        if(hasChildrenElements()) {
            appendChildrenToResponse(response, context);
        }
        response.appendContentString("</" + elementName + ">");

        super.appendToResponse(response, context);

        NSDictionary options = createAjaxOptions(component);

        response.appendContentString("<script type = \"text/javascript\" language = \"javascript\"><!--\n");
        Object frequency = valueForBinding("frequency", component);
        if (frequency != null) {
            response.appendContentString("new Ajax.PeriodicalUpdater('" + id + "', $(" + id + ").getAttribute('updateUrl'), ");
            AjaxOptions.appendToResponse(options, response, context);
            response.appendContentString(");");
        }

        String observeFieldID = (String)valueForBinding("observeFieldID", component);
        if (observeFieldID != null) {
            response.appendContentString("new Form.Element.Observer($('" + observeFieldID + "'), 1, function(element, value) {");
            NSMutableDictionary observerOptions = new NSMutableDictionary();
            observerOptions.setObjectForKey("true", "asynchronous");

            // We need to cheat and make the WOForm that contains the form action appear to have been
            // submitted.  So we grab the action url, pull off the element ID from its action URL
            // and pass that in as FORCE_FORM_SUBMITTED_KEY, which is processed by ERXWOForm just like
            // senderID is on the real WOForm.  Unfortunately we can't hook into the real WOForm to do
            // this :(
            response.appendContentString("var formAction = $('" + observeFieldID + "').form.action;");
            response.appendContentString("var senderID = formAction.substring(formAction.indexOf('.', formAction.lastIndexOf('/')) + 1);");
            StringBuffer parameters = new StringBuffer();
            parameters.append("escape($('" + observeFieldID + "').name) + '=' + escape($('" + observeFieldID + "').value) + '");
            parameters.append("&");
            parameters.append(AjaxUtils.FORCE_FORM_SUBMITTED_KEY + "=' + senderID + '");
            parameters.append("'");

            observerOptions.setObjectForKey(parameters.toString(), "parameters");
            response.appendContentString("new Ajax.Updater('" + id + "', $('" + id + "').getAttribute('updateUrl'), ");
            AjaxOptions.appendToResponse(observerOptions, response, context);
            response.appendContentString(") });");
        }

        response.appendContentString("function " + id + "Update() { new Ajax.Updater('" + id + "', $(" + id + ").getAttribute('updateUrl'), ");
        AjaxOptions.appendToResponse(options, response, context);
        response.appendContentString("); }");

        response.appendContentString("//--></script>");
    }

    protected WOActionResults handleRequest(WORequest request, WOContext context) {
        WOComponent component = context.component();
        WOResponse response = AjaxUtils.createResponse(context);
        AjaxUtils.setPageReplacementCacheKey(context, containerID(context));
        if(hasChildrenElements()) {
            appendChildrenToResponse(response, context);
        }
        return response;
    }

    private String containerID(WOContext context) {
        String id = (String) valueForBinding("id", context.component());
        if(id == null) {
            id = AjaxUtils.toSafeElementID(context.elementID());
        }
        return id;
    }
}