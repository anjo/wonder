package er.ajax;

// Generated by the WOLips Templateengine Plug-in at Apr 22, 2006 9:36:51 PM

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

public class AjaxSortableList extends AjaxComponent {
  private String mySortOrderKeyName;
  private String myActionUrl;

  public AjaxSortableList(WOContext _context) {
    super(_context);
  }

  public void awake() {
    super.awake();
    mySortOrderKeyName = scriptBaseName() + "_sortOrder";
  }

  public boolean isStateless() {
    return true;
  }

  public boolean synchronizesVariablesWithBindings() {
    return false;
  }

  public void appendToResponse(WOResponse _response, WOContext _context) {
    myActionUrl = _context.componentActionURL();
    super.appendToResponse(_response, _context);
  }

  protected void addRequiredWebResources(WOResponse _res) {
    addScriptResourceInHead(_res, "prototype.js");
    addScriptResourceInHead(_res, "scriptaculous.js");
    addScriptResourceInHead(_res, "effects.js");
    addScriptResourceInHead(_res, "builder.js");
    addScriptResourceInHead(_res, "dragdrop.js");
    addScriptResourceInHead(_res, "controls.js");
    addScriptResourceInHead(_res, "slider.js");
  }

  public NSDictionary createAjaxOptions() {
    NSMutableArray ajaxOptionsArray = new NSMutableArray();
    ajaxOptionsArray.addObject(new AjaxOption("tag", AjaxOption.STRING));
    ajaxOptionsArray.addObject(new AjaxOption("only", AjaxOption.STRING_ARRAY));
    ajaxOptionsArray.addObject(new AjaxOption("overlap", AjaxOption.STRING));
    ajaxOptionsArray.addObject(new AjaxOption("constraint", AjaxOption.STRING));
    ajaxOptionsArray.addObject(new AjaxOption("containment", AjaxOption.STRING_ARRAY));
    ajaxOptionsArray.addObject(new AjaxOption("handle", AjaxOption.STRING));
    ajaxOptionsArray.addObject(new AjaxOption("hoverclass", AjaxOption.STRING));
    ajaxOptionsArray.addObject(new AjaxOption("ghosting", AjaxOption.BOOLEAN));
    ajaxOptionsArray.addObject(new AjaxOption("dropOnEmpty", AjaxOption.BOOLEAN));
    ajaxOptionsArray.addObject(new AjaxOption("scroll", AjaxOption.BOOLEAN));
    ajaxOptionsArray.addObject(new AjaxOption("onChange", AjaxOption.SCRIPT));
    NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, this);
    return options;
  }

  public String onUpdate() {
    StringBuffer onUpdateBuffer = new StringBuffer();
    onUpdateBuffer.append("function(container) {");
    // onComplete:ajaxResponse
    String containerID = (String) valueForBinding("id");
    onUpdateBuffer.append("var data = Sortable.serialize('" + containerID + "', { name:'" + mySortOrderKeyName + "'});");
    onUpdateBuffer.append("var ajaxRequest = new Ajax.Request('" + myActionUrl + "', {method: 'get', parameters: data});");
    if (canGetValueForBinding("onUpdate")) {
      String onUpdate = (String) valueForBinding("onUpdate");
      onUpdateBuffer.append(" var parentOnUpdate = ");
      onUpdateBuffer.append(onUpdate);
      onUpdateBuffer.append(";");
      onUpdateBuffer.append("parentOnUpdate(container);");
    }
    onUpdateBuffer.append("}");
    return onUpdateBuffer.toString();
  }

  protected WOActionResults handleRequest(WORequest _request, WOContext _context) {
    if (canGetValueForBinding("list")) {
      NSArray list = (NSArray) valueForBinding("list");
      NSMutableArray reorderedList = new NSMutableArray();

      // If we're starting at an index > 0, add the initial objects
      if (canGetValueForBinding("startIndex")) {
        Number startIndexNumber = (Number) valueForBinding("startIndex");
        int startIndex = startIndexNumber.intValue();
        for (int i = 0; i < startIndex; i++) {
          reorderedList.addObject(list.objectAtIndex(i));
        }
      }

      // Add the reordered objects
      if (!canGetValueForBinding("listItemIDKeyPath")) {
        throw new IllegalArgumentException("You must specify 'listItemIDKeyPath' if you specify 'list'.");
      }
      String listItemIDKeyPath = (String) valueForBinding("listItemIDKeyPath");
      Object listItemIDArrayObj = _request.formValues().objectForKey(mySortOrderKeyName + "[]");
      NSArray listItemIDArray;
      if (listItemIDArrayObj instanceof NSArray) {
        listItemIDArray = (NSArray) listItemIDArrayObj;
      }
      else if (listItemIDArrayObj instanceof String) {
        String listItemIDStr = (String) listItemIDArrayObj;
        listItemIDArray = new NSArray(listItemIDStr);
      }
      else {
        throw new IllegalArgumentException("Unknown list item ID array " + listItemIDArrayObj);
      }
      int count = listItemIDArray.count();
      for (int i = 0; i < count; i++) {
        String listItemID = (String) listItemIDArray.objectAtIndex(i);
        NSArray matchingListItems = EOQualifier.filteredArrayWithQualifier(list, new EOKeyValueQualifier(listItemIDKeyPath, EOQualifier.QualifierOperatorLike, "*_" + listItemID));
        if (matchingListItems.count() == 0) {
          throw new IllegalArgumentException("There is no element with the ID " + listItemID);
        }
        reorderedList.addObjectsFromArray(matchingListItems);
      }

      // If we're just looking at a page, add all the objects AFTER the page
      int listCount = list.count();
      for (int i = reorderedList.count(); i < listCount; i++) {
        reorderedList.addObject(list.objectAtIndex(i));
      }

      setValueForBinding(reorderedList, "list");
    }

    if (canGetValueForBinding("action")) {
      WOActionResults results = (WOActionResults) valueForBinding("action");
      if (results != null) {
        System.out.println("AjaxDroppable.handleRequest: Not quite sure what to do with non-null results yet ...");
      }
    }

    return null;
  }
}