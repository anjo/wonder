package er.ajax;

//Generated by the WOLips Templateengine Plug-in at 27.03.2006 21:36:50

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOElement;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

/**
 * AjaxObserveField requires ERExtensions, specifically ERXWOForm.
 * 
 * @binding observeFieldID the ID of the field to observe
 * @binding updateContainerID the ID of the container to update
 */
public class AjaxObserveField extends AjaxDynamicElement {
  public AjaxObserveField(String name, NSDictionary associations, WOElement children) {
    super(name, associations, children);
  }

  /**
   * Adds all required resources.
   */
  protected void addRequiredWebResources(WOResponse response, WOContext context) {
    addScriptResourceInHead(context, response, "prototype.js");
    addScriptResourceInHead(context, response, "scriptaculous.js");
  }

  public NSDictionary createAjaxOptions(WOComponent component) {
    NSMutableArray ajaxOptionsArray = new NSMutableArray();
    ajaxOptionsArray.addObject(new AjaxOption("frequency", AjaxOption.NUMBER));
    ajaxOptionsArray.addObject(new AjaxOption("decay", AjaxOption.NUMBER));
    ajaxOptionsArray.addObject(new AjaxOption("onLoading", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("onComplete", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("onSuccess", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("onFailure", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("onException", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("insertion", AjaxOption.SCRIPT));
    ajaxOptionsArray.addObject(new AjaxOption("evalScripts", AjaxOption.BOOLEAN));
    NSMutableDictionary options = AjaxOption.createAjaxOptionsDictionary(ajaxOptionsArray, component, associations());
    return options;
  }

  public void appendToResponse(WOResponse response, WOContext context) {
    WOComponent component = context.component();
    String observeFieldID = (String) valueForBinding("observeFieldID", component);
    String updateContainerID = (String) valueForBinding("updateContainerID", component);
    if (observeFieldID != null && updateContainerID != null) {
      AjaxUtils.appendScriptHeader(response);
      NSDictionary options = createAjaxOptions(component);
      Boolean fullSubmitBoolean = (Boolean) valueForBinding("fullSubmit", component);
      boolean fullSubmit = (fullSubmitBoolean != null && fullSubmitBoolean.booleanValue());
      AjaxObserveField.appendToResponse(response, context, observeFieldID, updateContainerID, fullSubmit, options);
      AjaxUtils.appendScriptFooter(response);
    }
  }

  public static void appendToResponse(WOResponse response, WOContext context, String observeFieldID, String updateContainerID, boolean fullSubmit, NSDictionary options) {
    response.appendContentString("new Form.Element.Observer($('" + observeFieldID + "'), 1, function(element, value) {");
    NSMutableDictionary observerOptions = new NSMutableDictionary();
    if (options != null) {
      observerOptions.addEntriesFromDictionary(options);
    }
    observerOptions.setObjectForKey("true", "asynchronous");

    if (!fullSubmit) {
      // We need to cheat and make the WOForm that contains the form action appear to have been
      // submitted.  So we grab the action url, pull off the element ID from its action URL
      // and pass that in as FORCE_FORM_SUBMITTED_KEY, which is processed by ERXWOForm just like
      // senderID is on the real WOForm.  Unfortunately we can't hook into the real WOForm to do
      // this :(
      response.appendContentString("var formAction = $('" + observeFieldID + "').form.action;\n");
      response.appendContentString("var senderID = formAction.substring(formAction.indexOf('.', formAction.lastIndexOf('/')) + 1);\n");
      StringBuffer parameters = new StringBuffer();
      parameters.append("escape($('" + observeFieldID + "').name) + '=' + escape($('" + observeFieldID + "').value) + '");
      parameters.append("&");
      parameters.append(AjaxUtils.FORCE_FORM_SUBMITTED_KEY + "=' + senderID + '");
      parameters.append("'");
      observerOptions.setObjectForKey(parameters.toString(), "parameters");
    }
    else {
      NSMutableDictionary formOptions = new NSMutableDictionary();
      formOptions.setObjectForKey("Form.serialize($('" + observeFieldID + "').form)", "parameters");
      response.appendContentString("new Ajax.Request($('" + observeFieldID + "').form.action, ");
      AjaxOptions.appendToResponse(formOptions, response, context);
      response.appendContentString(");");
      response.appendContentString("\n");
    }

    response.appendContentString("new Ajax.Updater('" + updateContainerID + "', $('" + updateContainerID + "').getAttribute('updateUrl'), ");
    AjaxOptions.appendToResponse(observerOptions, response, context);
    response.appendContentString(") });");
  }

  protected WOActionResults handleRequest(WORequest request, WOContext context) {
    return null;
  }
}