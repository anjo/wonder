package er.ajax;

// Generated by the WOLips Templateengine Plug-in at Oct 18, 2006 6:24:40 PM

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;

/**
 * AjaxInPlace is a generalization of the AjaxInPlaceEditor. To use this component, you must wrap an ERXWOTemplate named
 * "view" and an ERXWOTemplate named "edit". <br />
 * For instance:<br />
 * <br />
 * HTML:
 * 
 * <pre>
 *   &lt;webobject name = &quot;ExampleInPlace&quot;&gt;
 *      &lt;webobject name = &quot;View&quot;&gt;View: &lt;webobject name = &quot;Value&quot;/&gt;&lt;/webobject&gt;
 *      &lt;webobject name = &quot;Edit&quot;&gt;Edit: &lt;webobject name = &quot;ValueField&quot;/&gt;&lt;/webobject&gt;
 *   &lt;/webobject&gt;
 * </pre>
 * 
 * WOD:
 * 
 * <pre>
 *   ExampleInPlace : AjaxInPlace {
 *   }
 *   
 *   View : ERXWOTemplate {
 *      templateName = &quot;view&quot;;
 *   }
 *   
 *   Value : WOString {
 *      value = value;
 *   }
 *   
 *   Edit : ERXWOTemplate {
 *      templateName = &quot;edit&quot;;
 *   }
 *   
 *   ValueField : WOTextField {
 *      value = value;
 *   }
 * </pre>
 * 
 * @binding class the class used on the top container
 * @binding id the id used on various parts of this component
 * @binding saveLabel the label to show on the save button
 * @binding cancelLabel the label to show on the cancel button
 * @binding saveAction the action to invoke on save
 * @binding cancelAction the action to invoke on cancel
 * @binding saveClass the class of the save button
 * @binding editClass the class of the div that you click on to trigger edit mode (yes this name sucks)
 * @binding onSaveClick the action to fire when save is clicked
 * @binding onSaveSuccess the javascript function to execute after a successful save
 * @binding onSaveFailure the javascript function to execute after a failed save
 * @binding onSaving the javascript action to fire when saving
 * @binding cancelClass the class of the cancel button
 * @binding onCancelClick the action to fire when cancel is clicked
 * @binding onCancelSuccess the javascript function to execute after a successful cancel
 * @binding onCancelFailure the javascript function to execute after a failed cancel
 * @binding onEditClick the action to fire when edit mode is triggered
 * @binding onEditSuccess the javascript function to execute after a successful edit
 * @binding onEditFailure the javascript function to execute after a failed edit
 * @binding onEditing the javascript action to fire when editing mode is loading
 * @binding onCancelling the javascript action to fire when cancelling
 * @binding onRefreshComplete the javascript function to execute after refreshing the container
 * @binding disabled whether or not edit mode should be disabled
 * @binding manualControl if true, it is up to you to provide click-to-edit, save, and cancel controls
 * @binding manualViewControl if true, it is up to you to provide click-to-edit controls
 * @binding manualEditControl if true, it is up to you to provide save and cancel controls
 * @binding submitOnSave if true, the save button is an AjaxSubmitButton; if false, it's an AjaxUpdateLink
 * @binding canEdit if true, edit mode is entered; if false, view mode remains active
 * @binding canSave if true, the results are saved; if false, the user is not allowed to leave edit mode
 * 
 * @author mschrag
 */
public class AjaxInPlace extends WOComponent {
	private boolean _editing;
	private String _id;

	public AjaxInPlace(WOContext context) {
		super(context);
	}

	public boolean synchronizesVariablesWithBindings() {
		return false;
	}

	public String id() {
		if (_id == null) {
			if (hasBinding("id")) {
				_id = (String) valueForBinding("id");
			}
			else {
				_id = AjaxUtils.toSafeElementID(context().elementID());
			}
		}
		return _id;
	}

	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		super.appendToResponse(aResponse, aContext);
	}

	public boolean submitOnSave() {
		return AjaxUtils.booleanValueForBinding("submitOnSave", true, _keyAssociations, parent());
	}

	public boolean linkOnSave() {
		return !submitOnSave();
	}

	public String updateFunctionName() {
		return id() + "Update();";
	}

	public String editFunctionName() {
		return id() + "Edit";
	}

	public String editFunctionCall() {
		String editFunctionCall = null;
		if (!disabled()) {
			editFunctionCall = editFunctionName() + "()";
		}
		return editFunctionCall;
	}

	public String saveFunctionName() {
		return id() + "Save";
	}

	public String saveFunctionCall() {
		return saveFunctionName() + "()";
	}

	public String cancelFunctionName() {
		return id() + "Cancel";
	}

	public String cancelFunctionCall() {
		return cancelFunctionName() + "()";
	}

	public boolean manualControl() {
		boolean manualControl = false;
		if (hasBinding("manualControl")) {
			manualControl = ((Boolean) valueForBinding("manualControl")).booleanValue();
		}
		return manualControl;
	}

	public boolean manualEditControl() {
		boolean manualEditControl = manualControl();
		if (!manualEditControl && hasBinding("manualEditControl")) {
			manualEditControl = ((Boolean) valueForBinding("manualEditControl")).booleanValue();
		}
		return manualEditControl;
	}

	public boolean manualViewControl() {
		boolean manualViewControl = manualControl();
		if (!manualViewControl && hasBinding("manualViewControl")) {
			manualViewControl = ((Boolean) valueForBinding("manualViewControl")).booleanValue();
		}
		return manualViewControl;
	}

	public boolean disabled() {
		boolean disabled = false;
		if (hasBinding("disabled")) {
			disabled = ((Boolean) valueForBinding("disabled")).booleanValue();
		}
		return disabled;
	}

	public boolean editing() {
		if (hasBinding("editing")) {
			Boolean editingBoolean = (Boolean) valueForBinding("editing");
			_editing = editingBoolean.booleanValue();
		}
		return !disabled() && _editing;
	}

	public boolean canEdit() {
		return (!hasBinding("canEdit") || ((Boolean) valueForBinding("canEdit")).booleanValue());
	}

	public boolean canSave() {
		return (!hasBinding("canSave") || ((Boolean) valueForBinding("canSave")).booleanValue());
	}

	public void setEditing(boolean editing) {
		if (canSetValueForBinding("editing")) {
			setValueForBinding(Boolean.valueOf(editing), "editing");
		}
		_editing = editing;
	}

	public WOActionResults startEditing() {
		if (canEdit()) {
			setEditing(true);
			WOActionResults results = (WOActionResults) valueForBinding("editAction");
		}
		// ignore results
		return null;
	}

	public WOActionResults save() {
		// check to see if we can save before firing the action (for permissions)
		boolean canSave = canSave();
		if (canSave) {
			if (hasBinding("saveAction")) {
				WOActionResults results = (WOActionResults) valueForBinding("saveAction");
				canSave = canSave();
			}
			// check to see if we can save after firing the action (in case validation failed or something)
			if (canSave) {
				setEditing(false);
			}
		}
		// ignore results
		return null;
	}

	public WOActionResults cancel() {
		WOActionResults results = (WOActionResults) valueForBinding("cancelAction");
		setEditing(false);
		// ignore results
		return null;
	}

}