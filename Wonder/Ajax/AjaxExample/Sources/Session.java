// Generated by the WOLips Templateengine Plug-in at 09.03.2006 16:24:23

import java.lang.ref.*;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.appserver.WOSession;

import er.ajax.AjaxUtils;

public class Session extends WOSession {
  private static final String ORIGINAL_CONTEXT_ID_KEY = "originalContextID";
  private static final String PAGE_REPLACEMENT_CACHE_KEY = "pageReplacementCache";
  private static int MAX_PAGE_REPLACEMENT_CACHE_SIZE = Integer.parseInt(System.getProperty("er.extensions.maxPageReplacementCacheSize", "30"));
  
  public void savePage(WOComponent _page) {
    WOContext context = context();
    WOResponse response = context.response();
    if (AjaxUtils.isAjaxMessage(response)) {
      String pageCacheKey = response.headerForKey(AjaxUtils.PAGE_REPLACEMENT_CACHE_LOOKUP_KEY);
      if (pageCacheKey != null) {
        String originalContextID = context.request().headerForKey(Session.ORIGINAL_CONTEXT_ID_KEY);
        pageCacheKey = originalContextID + "_" + pageCacheKey;
        //System.out.println("Session.savePage: page cache key = " + pageCacheKey);
        LinkedHashMap pageReplacementCache = (LinkedHashMap) objectForKey(Session.PAGE_REPLACEMENT_CACHE_KEY);
        if (pageReplacementCache == null) {
          pageReplacementCache = new LinkedHashMap();
          setObjectForKey(pageReplacementCache, Session.PAGE_REPLACEMENT_CACHE_KEY);
        }

        Map.Entry existingPageRecordEntry = null;
        Iterator transactionRecordsEnum = pageReplacementCache.entrySet().iterator();
        while (existingPageRecordEntry == null && transactionRecordsEnum.hasNext()) {
          Map.Entry pageRecordEntry = (Map.Entry)transactionRecordsEnum.next();
          ERTransactionRecord tempPageRecord = (ERTransactionRecord)pageRecordEntry.getValue();
          String transactionRecordKey = tempPageRecord.key();
          if (pageCacheKey.equals(transactionRecordKey)) {
            existingPageRecordEntry = pageRecordEntry;
            //System.out.println("Session.savePage:   replacing old page for " + pageCacheKey);
            transactionRecordsEnum.remove();
          }
        }

        if (existingPageRecordEntry == null && pageReplacementCache.size() >= Session.MAX_PAGE_REPLACEMENT_CACHE_SIZE) {
          Iterator entryIterator = pageReplacementCache.entrySet().iterator();
          Map.Entry oldestEntry = (Map.Entry) entryIterator.next();
          entryIterator.remove();
          //System.out.println("Session.savePage:   removing oldest entry: " + ((ERTransactionRecord)oldestEntry.getValue()).key());
        }
        
        //System.out.println("Session.savePage:   adding page for key " + pageCacheKey);
        ERTransactionRecord pageRecord = new ERTransactionRecord(_page, context, pageCacheKey);
        pageReplacementCache.put(context.contextID(), pageRecord);
      }
    }
    else {
      super.savePage(_page);
    }
  }

  public WOComponent restorePageForContextID(String _contextID) {
    LinkedHashMap pageReplacementCache = (LinkedHashMap) objectForKey(Session.PAGE_REPLACEMENT_CACHE_KEY);
    WOComponent page = null;
    if (pageReplacementCache != null) {
      ERTransactionRecord pageRecord = (ERTransactionRecord) pageReplacementCache.get(_contextID);
      if (pageRecord != null) {
        //System.out.println("Session.restorePageForContextID: got page from page cache " + _contextID + " pageCacheKey = " + pageRecord.key());
        page = pageRecord.page();
      }
    }
    if (page == null) {
      page = super.restorePageForContextID(_contextID);
    }
    page.context().request().setHeader(_contextID, Session.ORIGINAL_CONTEXT_ID_KEY);
    return page;
  }

  protected static class ERTransactionRecord {
    private WeakReference myContext;
    private WeakReference myPage;
    private String myKey;

    public ERTransactionRecord(WOComponent _page, WOContext _context, String _key) {
      myPage = new WeakReference(_page);
      myContext = new WeakReference(_context);
      myKey = _key;
    }

    public WOComponent page() {
      return (WOComponent) myPage.get();
    }

    public WOContext context() {
      return (WOContext) myContext.get();
    }

    public String key() {
      return myKey;
    }
  }
}