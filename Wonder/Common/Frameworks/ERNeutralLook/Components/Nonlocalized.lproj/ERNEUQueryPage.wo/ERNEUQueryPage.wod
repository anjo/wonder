AboveDisplayPropertyKeys: ERD2WExtraDisplayPropertyKeysComponent {
    localContext = d2wContext;
	extraPropertiesKey = "aboveDisplayPropertyKeys";
}

BackLink: WOHyperlink {
	action = returnAction;
}

Banner: WOImage {
	alt = "Search";
	border = "0";
	filename = "SearchMetalBan.gif";
	framework = "JavaDirectToWeb";
	height = "32";
	name = "Search";
	width = "550";
}

BannerConditional: WOConditional {
	_unroll = true;
	condition = showBanner;
}

BelowDisplayPropertyKeys: ERD2WExtraDisplayPropertyKeysComponent {
	localContext = d2wContext;
	extraPropertiesKey = "belowDisplayPropertyKeys";
}

CanQueryForNullValues: WOConditional {
    condition = d2wContext.enableQueryForNullValues;
}

CanQueryPropertyForNullValue: WOConditional {
    condition = canQueryCurrentPropertyForNullValue;
}

Conditional1: WOConditional {
	condition = d2wContext.showListInSamePage;
}

Conditional2: WOConditional {
	condition = showResults;
}

EntityName: WOString {
	_unroll = true;
	value = d2wContext.displayNameForEntity;
}

FetchLimit: WOString {
	_unroll = true;
	value = fetchLimit;
}

FetchLimitConditional: WOConditional {
	_unroll = true;
	condition = fetchLimit;
}

FontContainer: WOGenericContainer {
	color = d2wContext.textColor;
	elementName = "font";
}

Help: ERDDebuggingHelp {
	d2wContext = d2wContext;
}

IfPropertyKeyIsNotOmitted: WOConditional {
	condition = isKeyOmitted;
	negate = true;
}

ListPage: D2WList {
	dataSource = queryDataSource;
	entityName = entity;
	pageConfiguration = d2wContext.listConfigurationName;
	d2wContext = d2wContext;
}

MainTable: WOGenericContainer {
	_unroll = true;
	border = 0;
	cellpadding = 5;
	cellspacing = 5;
	elementName = "table";
}

NoValueString: ERXLocalizedString {
    value = "ERD2WQueryPage.noValueLabel";
    escapeHTML = false;
}

PageWrapper: WOSwitchComponent {
	WOComponentName = pageWrapperName;
	_componentUnroll = true;
	_unroll = true;
}

PropertyHasNullValueCheckBox: WOCheckBox {
    checked = isNullQueryCheckedForCurrentProperty;
    onclick = "ERD2WQueryPage.toggleFormFieldsCorrespondingToNullQueryCheckbox(event);";
}

QueryForm: WOForm {
	action = queryAction;
	name = "QueryForm";
	multipleSubmit = true;
}

QuerySubmitButton: WOActiveImage {
	action = queryAction;
	alt = "Find objects matching the query";
	border = "0";
	filename = "SearchDBMetalBtn.gif";
	framework = "JavaDirectToWeb";
	height = "31";
	name = "Find objects matching the query";
	width = "88";
}

QuerySubmitButton2: WOActiveImage {
	action = queryAction;
	border = 0;
	filename = "SearchDBMetalBtn.gif";
	framework = "JavaDirectToWeb";
	height = 1;
	width = 1;
}

QueryTable: WOGenericContainer {
	_unroll = true;
	border = 0;
	cellpadding = 0;
	cellspacing = 5;
	class = cssClassForPageContainerElement;
	elementName = "table";
}

QueryTableHeaderRow: WOGenericContainer {
	_unroll = true;
	bgcolor = backgroundColorForTable;
	elementName = "tr";
}

QueryTableRow: WOGenericContainer {
	_unroll = true;
	bgcolor = backgroundColorForTable;
	elementName = "tr";
}

PropertyKeyComponentGenericContainer: WOGenericContainer {
	align = "left";
	class = cssClassForPropertyKey;
	elementName = "td";
	style = inlineStyleDeclarationForPropertyKey;
	valign = "middle";
}

PropertyNameComponentGenericContainer: WOGenericContainer {
	align = "right";
	class = cssClassForPropertyKey;
	elementName = "th";
	style = inlineStyleDeclarationForPropertyKey;
	valign = "middle";
}

PropertyNameSwitchComponent: WOSwitchComponent {
	WOComponentName = d2wContext.propertyNameComponentName;
	localContext = d2wContext;
}

ResourceInputRepresentation: WOSwitchComponent {
	WOComponentName = d2wContext.componentName;
	_componentUnroll = true;
	_unroll = true;
	displayGroup = displayGroup;
	localContext = localContext;
}

ResourceRepetition: WORepetition {
	_unroll = true;
	item = d2wContext.propertyKey;
	list = d2wContext.displayPropertyKeys;
}

ReturnButton: WOImage {
	alt = "Returns to the previous page";
	border = "0";
	filename = "ReturnMetalBtn.gif";
	framework = "JavaDirectToWeb";
	height = "31";
	name = "Returns to the previous page";
	width = "88";
}

SavedQueryComponentDefined: WOConditional {
	condition = d2wContext.savedQueryComponentName;
}

SavedQuerySwitchedComponent:  WOSwitchComponent {
	WOComponentName = d2wContext.savedQueryComponentName;
	_componentUnroll = true;
	_unroll = true;
	displayGroup = displayGroup;
	localContext = localContext;
}

ShowCancel: WOConditional {
	condition = showCancel;
}

