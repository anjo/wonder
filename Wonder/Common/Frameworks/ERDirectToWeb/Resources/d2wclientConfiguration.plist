{
    components = {
        ERD2WCompactInspectPageTemplate = {
            editors = (backgroundColorForTable, isEntityDeletable, isEntityEditable); 
            inspectionInformation = "A compact inspect page, without the header and stuff."; 
            page = yes; 
        }; 
        ERD2WCompactListPageTemplate = {
            editors = (backgroundColorForTable, showBanner, readOnly, batchSize); 
            inspectionInformation = "A compact list page, listing entries in a table."; 
            page = yes; 
            supports = (justification); 
        }; 
        ERD2WStatelessCustomComponentWithArgs = {
            editors = (extraBindings, customComponentName); 
            inspectionInformation = "Allows custom components to resolve valueForBinding requests in the rules."; 
        }; 
        ERD2WCustomComponentWithArgs = {
            editors = (extraBindings, customComponentName); 
            inspectionInformation = "Allows custom components to resolve valueForBinding requests in the rules."; 
        }; 
        ERD2WCustomDisplayBoolean = {
            //editors = (choicesNames);
            comment = "as choiceNames is an NSMutableArray, we get an exception when sending it over to the client...";
            inspectionInformation = "Allows the display of strings instead of Yes/NO or checkboxes for boolean values."; 
        }; 
        ERD2WCustomEditBoolean = {
            //editors = (choicesNames);
            comment = "as choiceNames is an NSMutableArray, we get an exception when sending it over to the client...";
            inspectionInformation = "Allows editing boolean values based on radio buttons and strings."; 
        }; 
        ERD2WDisplayAddress = {
            comment = "expects Address to be address1, address2, city, state.abbreviation, zip"; 
            editors = (); 
            inspectionInformation = "Displays an address.  Needs some cleanup to be more generic."; 
        }; 
        ERD2WDisplayConstant = {
            editors = (); 
            inspectionInformation = "For a given key it asks the d2wContext for the value.  Presumably the constant is already in the rules."; 
        }; 
        ERD2WDisplayDateOrNull = {
            editors = (displayValueForNull, formatter); 
            inspectionInformation = "Displays a date or a null string."; 
        }; 
        ERD2WDisplayHTML = {
            editors = (); 
            inspectionInformation = "Displays a string with escape html set to false."; 
        }; 
        ERD2WDisplayImage = {
            comment = "this is the same as ERD2WDisplayImageWithURL??"; 
            editors = (imageWidth, imageHeight); 
            inspectionInformation = "Displays an image via the src binding."; 
        }; 
        ERD2WDisplayImageWithUrl = {
            editors = (imageWidth, imageHeight); 
            inspectionInformation = "Displays a url, where the object-key pair refer to a url."; 
        }; 
        ERD2WDisplayList = {
            editors = (keyWhenRelationship, emptyArrayDisplayString); 
            inspectionInformation = "Used to display a an NSArray of the form 'A, B and C', useful for toMany relationships  or propertyKeys that return arrays."; 
        }; 
        ERD2WDisplayNumber = {
            comment = "the .java file is missing?? and the bindings are different from ERD2WDisplayNumberWithUnit"; 
            editors = (nullValueDisplay, formatter); 
            inspectionInformation = "Common superclass of all ER's display number components."; 
        }; 
        ERD2WDisplayNumberWithUnit = {
            comment = "This should be cleaned up."; 
            editors = (formatter, resolvedUnit, displayValueForNull); 
            inspectionInformation = "Same as ERDDisplayNumberWithUnit only subclass is different."; 
        }; 
        ERD2WDisplayPassword = {editors = (); inspectionInformation = "Displays '*********' instead."; }; 
        ERD2WDisplayString = {
            comment = "the inspectionInformation is a bit exaggerated? it is a string that optionally displays a null value."; 
            editors = (valueWhenEmpty); 
            inspectionInformation = "Full blown display string with all the bells and whistles."; 
        }; 
        ERD2WDisplayStringWithLineBreaks = {
            editors = (valueWhenEmpty); 
            inspectionInformation = "Displays string with line breaks."; 
        }; 
        ERD2WDisplayTextFromHTML = {
            editors = (); 
            inspectionInformation = "Extracts text from html and displays the text."; 
        }; 
        ERD2WDisplayToManyCustom = {
            editors = (
                customComponentName, 
                componentBorder, 
                keyWhenRelationship, 
                numCols, 
                componentBorder, 
                disabled
            ); 
            inspectionInformation = "Allows custom components to be used to display the eos from a toMany."; 
        }; 
        ERD2WDisplayToManyList = {
            editors = (keyWhenRelationship, emptyArrayDisplayString); 
            inspectionInformation = "Improved toMany display compononent, uses ERListDisplay."; 
        }; 
        ERD2WDisplayToManyTable = {
            comment = "is this still needed?"; 
            editors = (keyWhenRelationship, disabled, componentBorder, numCols); 
            inspectionInformation = "Cleaned up some of the formatting on the original toMany table."; 
        }; 
        ERD2WDisplayToOne = {
            editors = (keyWhenRelationship, noSelectionString, disabled); 
            inspectionInformation = "Same as original except allows display of noSelectionString if relationship is null."; 
        }; 
        ERD2WDisplayURL = {
            editors = (); 
            inspectionInformation = "Displays the url in a hyperlink with target set to '_new'."; 
        }; 
        ERD2WDisplayYesNo = {
            editors = (); 
            inspectionInformation = "Displays a boolean as Yes or No. This is the same as ERD2WCustomDisplayBoolean."; 
        }; 
        ERD2WEditAllowRestrict = {
            editors = (); 
            inspectionInformation = "Edits a boolean with the string Allow/Restrict.  Should use ERD2WCustomEditBoolean instead with the 'choiceNames' key set correctly."; 
        }; 
        ERD2WEditFlag = {
            comment = "yet another way to edit a radio value - all of these things should be folded together"; 
            editors = (); 
            inspectionInformation = "Edit a 'Y/N' value in the object with 'Yes' and 'No' radio buttons."; 
        }; 
        ERD2WEditLargeString = {
            editors = (length, rows); 
            inspectionInformation = "Same as D2WEditLargeString except that empty values end up as NULL."; 
        }; 
        ERD2WEditNumber = {
            comment = "should check the HTML, because there is a useDecimalNumber binding but no formatter?"; 
            editors = (formatter, length); 
            inspectionInformation = "Edits a number."; 
        }; 
        ERD2WEditNumberOrDefault = {
            comment = "the .java is missing??"; 
            editors = (nullValueDisplay, resolvedUnit); 
            inspectionInformation = "Used to display a an NSArray of the form 'A, B and C', useful for toMany relationships  or propertyKeys that return arrays."; 
        }; 
        ERD2WEditNumberWithUnit = {
            comment = "should check the HTML, because there is a useDecimalNumber binding but no formatter?"; 
            editors = (formatter, length, maxLength, resolvedUnit); 
            inspectionInformation = "Edits a number displaying the unit off of the EOAttributes userInfo."; 
        }; 
        ERD2WEditOrDefault = {
            editors = (defaultValue, innerComponentName, displayValueForNull); 
            inspectionInformation = "Generic edit or default value component, uses other components like EditNumber or EditString."; 
        }; 
        ERD2WEditPercentage = {
            comment = "this could be a looot more generic...currently the values are coded at 0,25,50,75,100"; 
            editors = (); 
            inspectionInformation = "Edits a percentage number with radio buttons."; 
        }; 
        ERD2WEditSortedToManyFault = {
            comment = "needs to be localized"; 
            editors = (keyWhenRelationship, allowCollapsing, indexKey, browserSize); 
            inspectionInformation = "A component displaying a hyperlink which will take you to an edit-relationship page for a to-many relationship. Since this component does not traverse the relationship (only the edit relationship page will), it is appropriate when many objects are linked through this relationship"; 
        }; 
        ERD2WEditString = {
            comment = "there is no formatter used?"; 
            editors = (maxLength); 
            inspectionInformation = "Allows specifing the maxLength for a WOTextField."; 
        }; 
        ERD2WEditToManyRelationship = {
            editors = (
                restrictedChoiceKey, 
                restrictingFetchSpecification, 
                selectedChoiceKey, 
                shouldShowSelectAllButtons, 
                noChoiceAvailableMessage, 
                allowCollapsing, 
                keyWhenRelationship, 
                numCols, 
                itemWidth, 
                toManyUIStyle, 
                goingVertically, 
                sortKey, 
                localizeDisplayKeys
            ); 
            inspectionInformation = "Same as the first except that it uses ERToManyRelationship to work around the webscript bug in the *Matrix components."; 
        }; 
        ERD2WEditToOneRelationship = {
            editors = (
                restrictedChoiceKey, 
                restrictingFetchSpecification, 
                selectedChoiceKey, 
                shouldShowSelectAllButtons, 
                noChoiceAvailableMessage, 
                allowCollapsing, 
                keyWhenRelationship, 
                numCols, 
                itemWidth, 
                toOneUIStyle, 
                goingVertically, 
                sortKey, 
                localizeDisplayKeys
            ); 
            inspectionInformation = "Same as the first except that it supports validation propogation and uses ERToOneRelationship."; 
        }; 
        ERD2WEditURL = {
            editors = (length, maxLength); 
            inspectionInformation = "Used for editing urls."; 
        }; 
        ERD2WEditYesNo = {
            editors = (valueWhenEmpty); 
            inspectionInformation = "Edits a boolean with radio buttons and Yes/No. Use ERD2WCustomEditBoolean instead."; 
        }; 
        ERD2WEditableListTemplate = {
            editors = (
                backgroundColorForTable, 
                headComponentName, 
                showBanner, 
                readOnly, 
                batchSize, 
                isEntityDeletable, 
                isEntityInspectable, 
                saveLabelTemplateKey, 
                shouldSetFailedValidationValue
            ); 
            inspectionInformation = "A list page in which you can edit the items displayed."; 
            page = yes; 
            supports = (justification); 
        }; 
        ERD2WGroupingListPageTemplate = {
            editors = (
                backgroundColorForTable, 
                headComponentName, 
                groupingKey, 
                groupingComponentName, 
                showBanner, 
                readOnly, 
                batchSize, 
                isEntityDeletable, 
                isEntityInspectable, 
                saveLabelTemplateKey, 
                shouldSetFailedValidationValue
            ); 
            inspectionInformation = "A list page in which you can edit the items displayed."; 
            page = yes; 
            supports = (justification); 
        }; 
        ERD2WInspectPageTemplate = {
            editors = (
                backgroundColorForTable, 
                isEntityDeletable, 
                isEntityEditable, 
                shouldRenderBorder, 
                shouldShowActionButtons, 
                shouldShowCancelButton, 
                shouldShowSubmitButton, 
                shouldRevertChanges, 
                shouldSaveChanges, 
                shouldValidateBeforeSave, 
                shouldCollectValidationExceptions, 
                showBanner
            ); 
            inspectionInformation = "An extended inspect page. Use propertyKeys named like '(Some section)' to divide the page up in sections."; 
            page = yes; 
        }; 
        ERD2WListPageTemplate = {
            editors = (
                backgroundColorForTable, 
                showBanner, 
                readOnly, 
                batchSize, 
                isEntityDeletable, 
                isEntityInspectable
            ); 
            inspectionInformation = "A simple list page, listing entries in a table."; 
            page = yes; 
            supports = (justification); 
        }; 
        ERD2WPickFromEntities = {
            comment = "what does it do? 'lets you pick from either an arbitrary list or a pool of shared EOs'"; 
            editors = (); 
            inspectionInformation = "Custom query component that let's the user select from a set of shared eos."; 
        }; 
        ERD2WPickFromList = {
            editors = (keyWhenRelationship, sharedEOsEntityName); 
            inspectionInformation = "Custom query component that let's the user select from an arbitrary list or all objects of the given sharedEOsEntityName"; 
        }; 
        ERD2WPopUp = {
            comment = "this could be a looot more generic and should be renamed...currently the values are coded at 0,1,2,3,4,5"; 
            editors = (); 
            inspectionInformation = "Popup used for picking a number."; 
        }; 
        ERD2WQueryEncryptedString = {
            comment = "should be check if parent() or application() implement crypter because it is cumbersome to have to push an object into the context"; 
            editors = (crypter); 
            inspectionInformation = "Can make queries on encrypted properties."; 
        }; 
        ERD2WQueryNonNull = {
            comment = "should be localized"; 
            editors = (valueWhenEmpty); 
            inspectionInformation = "Query component for null or non-null."; 
        }; 
        ERD2WQueryPageTemplate = {
            editors = (
                backgroundColorForTable, 
                showBanner, 
                fetchLimit, 
                isDeep, 
                usesDistinct, 
                refreshRefetchedObjects
            ); 
            inspectionInformation = "A simple query page."; 
            page = yes; 
        }; 
        ERD2WQueryPageWithFetchSpecificationTemplate = {
            editors = (
                backgroundColorForTable, 
                showBanner, 
                fetchLimit, 
                isDeep, 
                usesDistinct, 
                refreshRefetchedObjects
            ); 
            inspectionInformation = "A simple query page."; 
            page = yes; 
        }; 
        ERD2WQueryToOneRelationship = {
            editors = (
                restrictedChoiceKey, 
                restrictingFetchSpecification, 
                keyWhenRelationship, 
                numCols, 
                itemWidth, 
                toOneUIStyle, 
                goingVertically, 
                sortKey, 
                localizeDisplayKeys, 
                size
            ); 
            inspectionInformation = "Same as the first except that it supports validation propogation and uses ERToOneRelationship."; 
        }; 
        ERD2WSelectPageTemplate = {
            editors = (backgroundColorForTable, showBanner, readOnly, batchSize); 
            inspectionInformation = "A simple list page, listing entries in a table."; 
            page = yes; 
            supports = (justification); 
        }; 
        ERD2WTabInspectPageTemplate = {
            editors = (
                backgroundColorForTable, 
                isEntityDeletable, 
                isEntityEditable, 
                shouldRenderBorder, 
                shouldShowActionButtons, 
                shouldShowCancelButton, 
                shouldShowSubmitButton, 
                shouldRevertChanges, 
                shouldSaveChanges, 
                shouldValidateBeforeSave, 
                shouldCollectValidationExceptions, 
                showBanner
            ); 
            inspectionInformation = "An extended tab inspect page. Use propertyKeys named like '(Some section)' to divide the page up in sections and '[Some Tab]' to divide it into Tabs."; 
            page = yes; 
            supports = (); 
        }; 
        ERD2WTwoLevelEditToOneRelationship = {
            comment = "huh? what are all those keys? and JSTwoLevelEditToOneRelationship is certainly the wrong name."; 
            editors = (
                sortKey, 
                restrictingRelationshipSortKey, 
                keyWhenRelationship, 
                restrictingRelationshipKey, 
                restrictingDestinationDisplayKey, 
                defaultRestrictedRelationshipKey, 
                restrictedRelationshipKey, 
                restrictingSecondarySortKey
            ); 
            inspectionInformation = "Uses JSTwoLevelEditToOneRelationship to edit the relationship."; 
        }; 
        ERD2WWizardCreationPageTemplate = {
            editors = (
                backgroundColorForTable, 
                isEntityDeletable, 
                isEntityEditable, 
                shouldRenderBorder, 
                shouldShowActionButtons, 
                shouldShowCancelButton, 
                shouldShowSubmitButton, 
                shouldRevertChanges, 
                shouldSaveChanges, 
                shouldValidateBeforeSave, 
                shouldCollectValidationExceptions, 
                showBanner
            ); 
            inspectionInformation = "A multi-step page. Use propertyKeys named like '(Some section)' to divide the page up in sections and '[Some Step]' to divide it into pages."; 
            page = yes; 
            supports = (); 
        }; 
        ERD2WXMLDisplayNumber = {
            comment = "is this a value add?"; 
            editors = (formatter); 
            inspectionInformation = "xml display component for numbers."; 
        }; 
        ERD2WXMLDisplayString = {
            comment = "is this a value add?"; 
            editors = (formatter); 
            inspectionInformation = "xml display component for strings."; 
        }; 
        ERD2WXMLDisplayToMany = {
            comment = "could be more generic..could be made recursive"; 
            editors = (formatter); 
            inspectionInformation = "xml display component for to many relationships. (delimited by '&#10;')"; 
        }; 
        ERDCustomQueryComponentWithArgs = {
            editors = (extraBindings, customComponentName); 
            inspectionInformation = "Correctly handles validation exceptions, plus a bunch of other stuff."; 
        }; 
        ERDDHTMLComponent = {
            comment = ""; 
            editors = (length, rows); 
            inspectionInformation = "Rich text edit component. Only really works for IE/Win, but displays a TEXT if on another browser."; 
        }; 
        ERDDefaultCustomComponent = {
            editors = (); 
            inspectionInformation = "Default custom component used when componentName = 'D2WCustomComponentWithArgs' and customComponentName was not specified."; 
        }; 
        ERDDefaultSectionComponent = {
            editors = (useMatrixLayout, maxColumns, matrixLayoutVertical); 
            inspectionInformation = "Used to configure the current section."; 
        }; 
        ERDDisplayImageIfExists = {
            comment = "needs to be localized"; 
            editors = (); 
            inspectionInformation = "Displays an image if it exists. (Image *data* is pulled from property value)"; 
        }; 
        ERDDisplayMailTo = {
            comment = ""; 
            editors = (displayKey, showBrackets); 
            inspectionInformation = "A display mailto component with a number of bindings."; 
        }; 
        ERDDisplayYearsMonths = {
            comment = "needs localization"; 
            editors = (); 
            inspectionInformation = "Displays a number as say 5 years 2 months."; 
        }; 
        ERDEditButton = {
            comment = "needs to be more generic, for example having text instead of the edit button image"; 
            editors = (editConfigurationName); 
            inspectionInformation = "Nice edit button for editing a toMany relationship in another page."; 
        }; 
        ERDEditDateJavascript = {
            comment = "needs to support generic format/localized"; 
            editors = (); 
            inspectionInformation = "Date picker that uses javascript to pick the date from a little calendar."; 
        }; 
        ERDEditDatePopup = {
            comment = "needs to support generic format/localized"; 
            editors = (); 
            inspectionInformation = "Edits dates with popup lists."; 
        }; 
        ERDEditDatePopupOrNull = {
            comment = "could be folded into ERDEditDatePopup"; 
            editors = (); 
            inspectionInformation = "Edits dates with popup lists and allows the choice to not specify a date."; 
        }; 
        ERDEditListButton = {
            comment = ""; 
            editors = (
                editButtonName, 
                choices, 
                explaination, 
                choiceDisplayKey, 
                choicePageName, 
                numberOfColumns
            ); 
            inspectionInformation = "Used for editing a toMany relationship by taking the user to another page to pick which objects belong in the relationship"; 
        }; 
        ERDEditOwnedRelationship = {
            comment = ""; 
            editors = (
                listPageConfiguration, 
                destinationDisplayKey, 
                uiStyle, 
                destinationSortKey, 
                noSelectionString, 
                showAddButton, 
                pickTypePageConfiguration, 
                entityNameForNewInstances, 
                postCreateNextPageDelegateKey, 
                selectionListKey, 
                explanationComponentName, 
                postRelationshipKeys, 
                preRelationshipKeys, 
                noSelectionErrorMessage
            ); 
            inspectionInformation = "Useful for editing/creating objects in an owned toOne or toMany relationship.  Even works with relationships to abstract entities."; 
        }; 
        ERDEditPassword = {
            comment = ""; 
            editors = (length,passwordConfirmationValidates); 
            inspectionInformation = "Used to edit passwords. Can supply a confirmation when you add a ERDEditPassword component on the same page."; 
        }; 
        ERDEditPasswordConfirmation = {
            comment = ""; 
            editors = (length); 
            inspectionInformation = "Used to edit passwords. Can supply a confirmation when you add a ERDEditPassword component on the same page."; 
        }; 
       ERDEditPasswordConfirm = {
            comment = ""; 
            editors = (); 
            inspectionInformation = "Used to edit passwords where when changed the changed value must be confirmed."; 
        }; 
        ERDEditStringWithChoices = {
            comment = "the component uses a key() + 'Available' of of the object??"; 
            editors = (possibleChoices); 
            inspectionInformation = "Provides a toOne relationship-like component except the value is pushed in as a string."; 
        }; 
        ERDEditYearsMonths = {
            comment = ""; 
            editors = (); 
            inspectionInformation = "Used to edit a number as if it where a number of years and a number of months."; 
        }; 
        ERDInspect = {
            editors = (inspectConfigurationName); 
            inspectionInformation = "Embedded component that can be used for nesting page configurations, ie ERDInspect can be a customComponentName."; 
            isCustomComponent = yes; 
            unused = (embeddedDisplayPropertyKeys, embeddedEntityName); 
        }; 
        ERD2WInspect = {
            editors = (inspectConfigurationName); 
            inspectionInformation = "Embedded component that can be used for nesting page configurations, ie ERDInspect can be a customComponentName."; 
            isCustomComponent = yes; 
            unused = (embeddedDisplayPropertyKeys, embeddedEntityName); 
        }; 
        ERDInspectButton = {
            comment = "needs to be more generic, for example having text instead of the inspect button image"; 
            editors = (inspectConfigurationName); 
            inspectionInformation = "Nice inspect button for inspecting a toMany relationship in another page."; 
            isCustomComponent = yes; 
        }; 
        ERDLinkToViewList = {
            comment = "needs to have a settable string for the link"; 
            editors = (listPageConfiguration); 
            inspectionInformation = "Generic link component used to view a list."; 
            isCustomComponent = yes; 
        };
        ERDList = {
            editors = (listPageConfiguration, emptyListMessage, emptyListComponentName); 
            inspectionInformation = "Used to edit a toMany relationship by allowing the user to pick the eos that belong in the relationship."; 
            isCustomComponent = yes; 
            unused = (embeddedDisplayPropertyKeys, embeddedEntityName); 
        }; 
        ERD2WList = {
            editors = (listPageConfiguration, emptyListMessage, emptyListComponentName); 
            inspectionInformation = "Used to edit a toMany relationship by allowing the user to pick the eos that belong in the relationship."; 
            isCustomComponent = yes; 
            unused = (embeddedDisplayPropertyKeys, embeddedEntityName); 
        }; 
        ERDListOrganizer = {
            comment = "the component uses a key() + 'Available' of of the object??"; 
            editors = (valueWhenEmpty, entityNameForReport); 
            inspectionInformation = "Allows one to select strings (using arrow buttons), and organize them."; 
        }; 
        ERDListPicker = {
            comment = "needs to gets pickComponentName from context and not only the extra bindings. needs to get iframe size from the context"; 
            editors = (pickComponentName, listComponentName); 
            inspectionInformation = "Used to pick a string from a list. Should use ERPickTypePageTemplate with D2W instead. Note that these use actual components, not pageConfiguration names."; 
            isCustomComponent = yes; 
        }; 
        ERDMassModifyButton = {
            comment = "needs better localization"; 
            editors = (massModificationPageConfiguration); 
            inspectionInformation = "Button used to apply one modification to a bunch of objects."; 
        }; 
        ERDPrinterButton = {
            comment = "does not yet work in a list view"; 
            editors = (useSubmitButton); 
            inspectionInformation = "Nice edit button for editing a toMany relationship in another page."; 
        }; 
        ERDQueryDateRangeJavascript = {
            comment = "this is *not* a d2w component!"; 
            editors = (); 
            inspectionInformation = "Used for building date queries with javascript"; 
        }; 
        ERDTrashcan = {
            comment = "needs to be more generic, for example having text instead of the delete button image"; 
            editors = (confirmDeleteConfigurationName); 
            inspectionInformation = "Delete button with which you can confirm deletes."; 
        }; 
    }; 
    editors = {
        browserSize = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 2; 
            title = "Browser Size"; 
            type = stringEmptyIsNull; 
        }; 
        choiceDisplayKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Display Key for choice"; 
            type = stringEmptyIsNull; 
        }; 
        choicePageName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Page Name for choice"; 
            type = stringEmptyIsNull; 
        }; 
        choices = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 30; 
            title = Choice; 
        }; 
        choicesNames_Arrays_dont_work = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Choices Names"; 
            type = stringEmptyIsNull; 
        };
        confirmDeleteConfigurationName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Confirm Configuration"; 
            type = stringEmptyIsNull; 
        }; 
        defaultRestrictedRelationshipKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Default Restricted Relationship Key"; 
            type = stringEmptyIsNull; 
        }; 
        defaultValue = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 30; 
            title = "Default value"; 
            type = stringEmptyIsNull; 
        }; 
        destinationDisplayKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Destination Display key"; 
            type = stringEmptyIsNull; 
        }; 
        destinationSortKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Destination Sort key"; 
            type = stringEmptyIsNull; 
        }; 
        displayKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Display key"; 
            type = stringEmptyIsNull; 
        }; 
        displayValueForNull = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 30; 
            title = "Display for NULL"; 
            type = stringEmptyIsNull; 
        }; 
        editButtonName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Edit Button Name"; 
            type = stringEmptyIsNull; 
        }; 
        editConfigurationName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Edit Configuration"; 
            type = stringEmptyIsNull; 
        }; 
        embeddedPageConfiguration = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Embedded Configuration"; 
            type = stringEmptyIsNull; 
        }; 
        emptyArrayDisplayString = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 40; 
            title = "Empty array Message"; 
            type = stringEmptyIsNull; 
        }; 
        emptyListComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Empty list Component"; 
             type = stringEmptyIsNull; 
       }; 
        emptyListMessage = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 40; 
            title = "Empty list Message"; 
            type = stringEmptyIsNull; 
        }; 
        entityNameForNewInstances = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "New Entity Name"; 
            type = stringEmptyIsNull; 
        }; 
        entityNameForReport = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Entity Name for Report"; 
            type = stringEmptyIsNull; 
        }; 
        explaination = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 40; 
            title = "Explanation Message"; 
            type = stringEmptyIsNull; 
        }; 
        explanationComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Explanation Component"; 
            type = stringEmptyIsNull; 
        }; 
        extraBindings = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 30; 
            title = "Extra Bindings"; 
            type = stringEmptyIsNull; 
        }; 
        goingVertically = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Going vertical"; 
            type = boolean; 
        }; 
        groupingComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = page; 
            inputSize = 15; 
            title = "Name for the grouping component"; 
            type = stringEmptyIsNull; 
        }; 
        groupingKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = page; 
            inputSize = 15; 
            title = "Key for grouping."; 
            type = stringEmptyIsNull; 
        }; 
        headComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = page; 
            inputSize = 15; 
            title = "Name for the Header of the page."; 
            type = stringEmptyIsNull; 
        }; 
        imageHeight = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 5; 
            inspectionInformation = ""; 
            title = "Image Height"; 
            type = stringEmptyIsNull; 
        }; 
        imageWidth = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 5; 
            inspectionInformation = ""; 
            title = "Image Width"; 
            type = stringEmptyIsNull; 
        }; 
        indexKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Sould use sortKey??"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Index key"; 
            type = stringEmptyIsNull; 
        }; 
        innerComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Inner Component"; 
        }; 
        inspectConfigurationName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Inspect Configuration"; 
        }; 
        isEntityDeletable = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = Deletable; 
            type = boolean; 
        }; 
        isEntityEditable = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = Editable; 
            type = boolean; 
        }; 
        isEntityInspectable = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = Inspectable; 
            type = boolean; 
        }; 
        itemWidth = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 5; 
            inspectionInformation = ""; 
            title = "Item Width"; 
            type = stringEmptyIsNull; 
        }; 
        listComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "List Component"; 
        }; 
        listPageConfiguration = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "List Configuration"; 
        }; 
        localizeDisplayKeys = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Localize displayed values"; 
            type = boolean; 
        }; 
        massModificationPageConfiguration = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Mass Modify Configuration"; 
        }; 
        matrixLayoutVertical = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Vertical run"; 
            type = boolean; 
        }; 
        maxColumns = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 3; 
            title = "Maximum Number of columns in Table"; 
        }; 
        maxLength = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 5; 
            inspectionInformation = ""; 
            title = "Max Length"; 
            type = stringEmptyIsNull; 
        }; 
        noChoiceAvailableMessage = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 40; 
            title = "No choice Message"; 
        }; 
        noSelectionErrorMessage = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 40; 
            title = "No selection error Message"; 
        }; 
        noSelectionString = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "no Selection String"; 
        }; 
        nullValueDisplay = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "should use displayValueForNull"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Display Value For Null"; 
            type = stringEmptyIsNull; 
        }; 
        numberOfColumns = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "should use maxCols"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Number of colums"; 
            type = stringEmptyIsNull; 
        }; 
        passwordConfirmationValidates = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Password Confirmation Validates"; 
            type = boolean; 
        }; 
        pickButtonLabel = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = page; 
            inputSize = 15; 
            title = "Pick Button Label"; 
        }; 
        possibleChoices = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Choices"; 
        }; 
        pickComponentName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Pick Component"; 
        }; 
        pickTypePageConfiguration = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Pick Type Configuration"; 
        }; 
        postCreateNextPageDelegateKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Whuzzat??"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Key on delegate after create"; 
            type = stringEmptyIsNull; 
        }; 
        postRelationshipKeys = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = "Key that allows you to get your own nextPageDelegate into the fray"; 
            title = "Post relationship Keys"; 
            type = stringEmptyIsNull; 
        }; 
        preRelationshipKeys = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = "Key that allows you to get your own nextPageDelegate into the fray"; 
            title = "Pre relationship Keys"; 
            type = stringEmptyIsNull; 
        }; 
        resolvedUnit = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Resolved unit"; 
            type = stringEmptyIsNull; 
        }; 
        restrictedChoiceKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 20; 
            title = "Restricted Choice Key"; 
        }; 
        restrictedRelationshipKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = "Source for the restricted relationship (eg 'object.someArray')"; 
            title = "Restricted Relationship Key"; 
            type = stringEmptyIsNull; 
        }; 
        restrictingDestinationDisplayKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should better use keyWhenRelationship"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Display key for relationship"; 
            type = stringEmptyIsNull; 
        }; 
        restrictingFetchSpecification = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should be renamed to use a more generic key 'fetchSpecificationName'?"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Fetch spec"; 
            type = stringEmptyIsNull; 
        }; 
        restrictingRelationshipSortKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should use 'sortKey' instead?"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Sort key"; 
            type = stringEmptyIsNull; 
        }; 
        restrictingSecondarySortKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should use a 'sortKeys'-array instead? Like '(@asc.someKey,@desc.someOtherKey)'"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Secondary Sort key"; 
            type = stringEmptyIsNull; 
        }; 
        saveLabelTemplateKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = page; 
            inputSize = 15; 
            title = "Label for 'Save' button"; 
        }; 
        sectionName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Section Name"; 
            type = stringEmptyIsNull; 
        }; 
        selectedChoiceKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            title = "Alternate lookup for selection"; 
            type = stringEmptyIsNull; 
        }; 
        selectionListKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should be use selectedChoiceKey or vice versa"; 
            editingFor = property; 
            inputSize = 15; 
            title = "EO to display"; 
            type = stringEmptyIsNull; 
        }; 
        sharedEOsEntityName = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "Should be more general, should use destinationEntityName"; 
            editingFor = property; 
            inputSize = 15; 
            title = "EO to display"; 
            type = stringEmptyIsNull; 
        }; 
        shouldCollectValidationExceptions = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Should collect validation exceptions"; 
            type = boolean; 
        }; 
        shouldRenderBorder = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Render Border"; 
            type = boolean; 
        }; 
        shouldRevertChanges = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Should revert changes"; 
            type = boolean; 
        }; 
        shouldSaveChanges = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Should save changes"; 
            type = boolean; 
        }; 
        shouldSetFailedValidationValue = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Should set value even if valiadtion changed"; 
            type = boolean; 
        }; 
        shouldShowActionButtons = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Show Action Buttons"; 
            type = boolean; 
        }; 
        shouldShowCancelButton = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Show Cancel button"; 
            type = boolean; 
        }; 
        shouldShowSubmitButton = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Show Submit Button"; 
            type = boolean; 
        }; 
        shouldValidateBeforeSave = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = page; 
            title = "Should validate changes before save"; 
            type = boolean; 
        }; 
        showAddButton = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Show 'Add' button"; 
            type = boolean; 
        }; 
        showBrackets = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Show brackets"; 
            type = boolean; 
        }; 
        sortKey = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            editingFor = property; 
            inputSize = 15; 
            title = "Sort Key"; 
        }; 
        uiStyle = {
            choices = (radio, popup, browser, list, "*default*"); 
            class = "com.apple.client.directtoweb.ChoiceComponentConfigurationPanel"; 
            editingFor = property; 
            title = "UI style"; 
        }; 
        unit = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = ""; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = Unit; 
            type = stringEmptyIsNull; 
        }; 
        useMatrixLayout = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Matrix Layout"; 
            type = boolean; 
        }; 
        useSubmitButton = {
            class = "com.apple.client.directtoweb.CheckboxComponentConfigurationPanel"; 
            editingFor = property; 
            title = "Use 'Submit' button"; 
            type = boolean; 
        }; 
        valueWhenEmpty = {
            class = "com.apple.client.directtoweb.TextFieldComponentConfigurationPanel"; 
            comment = "should use displayValueForNull"; 
            editingFor = property; 
            inputSize = 15; 
            inspectionInformation = ""; 
            title = "Display Value For Null"; 
            type = stringEmptyIsNull; 
        }; 
    }; 
}