ActiveSectionHiddenField: WOHiddenField {
    id = "ActiveSectionHiddenField";
    value = activeSection;
}

AddLoggerForm: WOForm {
	embedded = true;
	multipleSubmit = true;
}

AppenderClassName: WOString {
    value = anAppender.class.name; //VALID
}

AppenderGenericContainer: WOGenericContainer {
    elementName = "tr";
    class = classForAppenderRow;
}

AppenderName: WOString {
    value = anAppender.name;
}

AppenderThresholdRadioButtonMatrix: ERXRadioButtonMatrix {
    goingVertically = false;
    item = aLoggerLevel;
    list = loggerLevels;
    maxColumns = 9;
    selection = currentAppenderLevel;
    uniqueID = anAppender.name;
}

AppenderThresholdSettingGenericContainer: WOGenericContainer {
    class = classNameForAppenderThresholdName;
    elementName = "span";
    omitTags = omitAppenderThresholdSettingDecoration;
}

AppendersDiv: WOGenericContainer {
    class = classForAppendersDiv;
    elementName = "div";
    id = "Appenders";
}

AppendersRepetition: WORepetition {
    index = rowIndex;
    item = anAppender;
    list = appenders;
}

GenericContainerTR: WOGenericContainer {
	class = classForLoggerRow;
	elementName = "tr";
}

IsRuleLoggerCheckbox: WOCheckBox {
    checked = isNewLoggerARuleLogger;
}

LevelIndicator: WOGenericContainer {
    class = "LevelIndicator";
    elementName = "div";
}

LevelName: WOString {
    value = aLevel;
}

LevelSettingGenericContainer: WOGenericContainer {
    class = classNameForLoggerLevelName;
    elementName = "span";
    omitTags = omitLoggerLevelSettingDecoration;
}

LoggerConfigurationControlBarDiv: WOGenericContainer {
    class = classForLoggerConfigurationControlBar;
    elementName = "div";
    id = "LoggerConfigurationControlBar";
}

LoggerDisplayShowAllRadioButton: WORadioButton {
    name = "LoggerListShowAllOrOnlyExplicit";
    selection = showAllLoggersSelection;
    value = "all";
}

LoggerDisplayShowAllRadioButtonBottom: WORadioButton {
    name = "LoggerListShowAllOrOnlyExplicit2";
    selection = showAllLoggersSelection;
    value = "all";
}

LoggerDisplayShowExplicitRadioButton: WORadioButton {
    name = "LoggerListShowAllOrOnlyExplicit";
    selection = showAllLoggersSelection;
    value = "explicit";
}

LoggerDisplayShowExplicitRadioButtonBottom: WORadioButton {
    name = "LoggerListShowAllOrOnlyExplicit2";
    selection = showAllLoggersSelection;
    value = "explicit";
}

LoggerLevelName: WOString {
    value = aLoggerLevel.displayName;
}

LoggerLevelRadioButtonMatrix: ERXRadioButtonMatrix {
    goingVertically = false;
    item = aLoggerLevel;
    list = loggerLevels;
    maxColumns = 9;
    selection = currentLoggerLevel;
    uniqueID = logger.name;
}

LoggerLevelsPopup: WOPopUpButton {
    displayString = aLoggerLevel.displayName;
    id = "FilterLevel";
    item = aLoggerLevel;
    list = loggerLevels;
    noSelectionString = "Level...";
    selection = filterLevel;
    value = aLoggerLevel.displayName;
}

LoggerRepositoryClassName: WOString {
    value = loggerRepository.class.name; //VALID
}

LoggerRepositoryGenericContainer: WOGenericContainer {
    class = loggerRepository.threshold;
    elementName = "tr";
}

LoggerRepositoryThresholdRadioButtonMatrix: ERXRadioButtonMatrix {
    goingVertically = false;
    item = aLevel;
    list = levelsWithoutUnset;
    maxColumns = 8;
    selection = loggerRepository.threshold;
    uniqueID = "loggerRepository";
}

LoggerRepositoryThresholdSettingGenericContainer: WOGenericContainer {
    class = classNameForLoggerRepositoryThresholdName;
    elementName = "span";
    omitTags = omitLoggerRepositoryThresholdSettingDecoration;
}

LoggersDiv: WOGenericContainer {
    class = classForLoggersDiv;
    elementName = "div";
    id = "Loggers";
}

LoggersFilterForm: WOForm {
	action = filter;
	embedded = true;
	multipleSubmit = true;
}

LoggerString: WOString {
	value = loggerPropertiesString;
}

NavItemLink: WOHyperlink {
    href = "javascript:void(0);";
    string = aPageSection.displayName;
}

NavListItem: WOGenericContainer {
    class = classForNavItem;
    elementName = "li";
    title = aPageSection.id;
}

NewLoggerLevelsPopup: WOPopUpButton {
    displayString = aLoggerLevel.displayName;
    id = "NewLoggerLevel";
    item = aLoggerLevel;
    list = loggerLevelsWithoutUnset;
    noSelectionString = "Level...";
    selection = newLoggerLevel;
    value = aLoggerLevel.displayName;
}

OtherSettingsDiv: WOGenericContainer {
    class = classForOtherSettingsDiv;
    elementName = "div";
    id = "Other";
}

RepetitionLoggers: WORepetition {
    index = rowIndex;
	item = logger;
	list = loggers;
}

RepetitionNav: WORepetition {
    item = aPageSection;
    list = pageSections;
}

RepositoryDiv: WOGenericContainer {
    class = classForRepositoryDiv;
    elementName = "div";
    id = "Repository";
}

Scripts: ERXJavaScript {
    filename = "log4j_config.js";
    framework = "ERExtensions";
}

SettingsForm: WOForm {
    multipleSubmit = true;
}

ShowLoggerString: WOCollapsibleComponentContent {
	openedLabel = "Hide Properties String";
	closedLabel = "Show Properties String";
	submitActionName = "updateConversionPattern";
}

KnowsInstanceNumberConditional: WOConditional {
	condition = knowsAppNumber;
}

InstanceNumber: WOString {
	value = instanceNumber;
}

StringApplicationName: WOString {
	value = application.name;
}

StringLoggerName: WOString {
	value = logger.name;
}

Stylesheet: ERXStyleSheet {
    filename = "log4j_config.css";
    framework = "ERExtensions";
}

SubmitButtonAddLogger: WOSubmitButton {
	action = addLogger;
	value = "Add";
}

SubmitButtonFilter: WOSubmitButton {
	action = filter;
	value = "Filter";
}

SubmitButtonResetFilter: WOSubmitButton {
	action = resetFilter;
	value = "Reset";
}

SubmitButtonUpdateLoggerSettings: WOSubmitButton {
	action = update;
	style = "margin: auto 20em;";
	value = "Update";
}

SubmitButtonUpdateConversionPattern: WOSubmitButton {
	action = updateConversionPattern;
	value = "Update";
}

TextFieldConversionPattern: WOTextField {
	value = conversionPattern;
	size = 70;
}

TextFieldFilterString: WOTextField {
    id = "LogFilterInput";
    size = 40;
	value = filterString;
}

TextFieldLoggerName: WOTextField {
    size = 40;
	value = loggerName;
}

UpdateAppenderSettingsButton: WOSubmitButton {
    action = updateAppenderSettings;
    value = "Update Appender Settings";
}


UpdateRepositorySettingsButton: WOSubmitButton {
    action = updateRepositorySettings;
    value = "Update Repository Settings";
}