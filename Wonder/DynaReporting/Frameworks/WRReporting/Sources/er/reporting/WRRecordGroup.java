package er.reporting;

import er.grouping.*;
import java.lang.*;
import java.util.*;
import java.io.*;
import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import com.webobjects.appserver.*;
import er.extensions.*;
import ognl.webobjects.*;

// Generated by the WebObjects Wizard Thu Nov 12 22:14:34 US/Central 1998
public class WRRecordGroup extends WOComponent  {

    String _totalToShow;
    DRRecordGroup _recordGroup;
    String _displayType;
    String _noTotalLabel;
    String _showAsTable;
    String _showHeadings;
    DRReportModel _model;
    NSArray _colors;
    String _reportStyle;
    NSDictionary _totalDict;

    public DRRecord record;
    public DRValue value;
    public DRValue totalValue;

    String bgcolor;
    int _totalCount;
    
    public WRRecordGroup(WOContext c){
        super(c);
    }

    
    static private NSMutableDictionary _formatDict = new NSMutableDictionary();
    static public NSMutableDictionary formatDict(){
        return _formatDict;
    }
    static public NSNumberFormatter formatterForFormat(String frmt){
        if(frmt == null) frmt = "#,####.00";
        NSNumberFormatter v = (NSNumberFormatter)formatDict().objectForKey(frmt);
        if(v == null){
            v = new NSNumberFormatter(frmt);
            formatDict().setObjectForKey(v, frmt);
        }
        return v;
    }

    public boolean synchronizesVariablesWithBindings() {
        return false;
    }

    public void reset() {
        _totalToShow = null;
        _colors = null;
        _totalDict = null;
        _totalCount = -1;
        _model = null;
        _recordGroup = null;
        _displayType = null;
        _noTotalLabel = null;
        _showAsTable = null;
        _showHeadings = null;
        //bgcolor = _nil;
        _reportStyle = null;
    }


    public void awake() {
        this.reset();
    }




    public void appendToResponse(WOResponse r, WOContext c) {
        this.reset();
        super.appendToResponse(r, c);
    }



    public DRRecordGroup recordGroup() {
        if (_recordGroup == null) {
            _recordGroup = (DRRecordGroup)this.valueForBinding("recordGroup");
        }
        return _recordGroup;
    }

    public String displayType() {
        if (_displayType == null) {
            _displayType = (String)this.valueForBinding("displayType");
            if (_displayType == null) {
                _displayType = "TOTALS";
            }
        }
        return _displayType;
    }

    public String noTotalLabel() {
        if (_noTotalLabel == null) {
            _noTotalLabel = (String)this.valueForBinding("noTotalLabel");
            if (_noTotalLabel == null) {
                _noTotalLabel = "-";
            }
        }
        return _noTotalLabel;
    }

    public String reportStyle() {
        if (_reportStyle == null) {
            _reportStyle = (String)this.valueForBinding("reportStyle");
            if (_reportStyle == null) {
                _reportStyle = "NESTED_CELLS";
            }
        }
        return _reportStyle;
    }


    public NSArray records() {
        return this.recordGroup().sortedRecordList();
    }


    public NSArray totals() {
        //log.debug( "entered");
        if(recordGroup() == null)
            return NSArray.EmptyArray;
        return this.recordGroup().totalList();
    }

    public double totalValueTotal() {
        if(totalValue != null) {
            if(totalValue.key().indexOf("~") == 0) {
                return DRCriteria.doubleForValue(WOOgnl.factory().getValue(totalValue.key().substring(1), recordGroup()));
            } else {
                String totalKey = (String)totalValue.attribute().userInfo().objectForKey("total");
                if(totalKey != null) {
                    return DRCriteria.doubleForValue(recordGroup().rawRecordList().valueForKeyPath(totalKey));
                }
            }
        }
        return totalValue.total();
    }
    
    public boolean nototals() {
        if (this.totals().count() > 0) {
            return false;
        }
        return true;
    }


    public String toString() {
        return this.recordGroup().totals().toString();
    }

    public DRReportModel model() {
        if (_model == null) {
            _model = (DRReportModel)this.valueForBinding("model");
        }
        return _model;
    }

    public String showAsTable() {
        if (_showAsTable == null) {
            Object v = (Object)this.valueForBinding("showAsTable");
            if (ERXValueUtilities.booleanValue(v)) {
                _showAsTable = "true";
            }else {
                _showAsTable = "false";
            }
        }
        return _showAsTable;
    }

    public String showHeadings() {
        if (this.showSingleValue()) {
            return "false";
        }
        if (_showHeadings == null) {
            Object v = (Object)this.valueForBinding("showHeadings");
            if (ERXValueUtilities.booleanValue(v)) {
                _showHeadings = "true";
            }else {
                _showHeadings = "false";
            }
        }
        return _showHeadings;
    }


    public boolean showHeadingsForTotalsOrTable() {
        if ("true".equals(showHeadings())) {
            return true;
        }
        return false;
    }


    public boolean showRecordTable() {
        if ("TABLE".equals(displayType())) {
            return true;
        }
        return false;
    }


    public boolean showSingleValue() {
        if ("SINGLE_TOTAL".equals(displayType())) {
            return true;
        }
        return false;
    }


    public boolean showTotalsOnly() {
        if ("TOTALS".equals(displayType())) {
            return true;
        }
        return false;
    }


    public boolean showTotalsOnlyAsTable() {
        if (this.showTotalsOnly() && this.showAsTable().equals("true")) {
            return true;
        }
        return false;
    }


    public boolean showTotalsOnlyAsCells() {
        if (this.showTotalsOnly() && !this.showAsTable().equals("true")) {
            return true;
        }
        return false;
    }


    public boolean showRecordTableAsCells() {
        if (this.showRecordTable() && !this.showAsTable().equals("true")) {
            return true;
        }
        return false;
    }


    public boolean showRecordTableAsTable() {
        if (this.showRecordTable() && this.showAsTable().equals("true")) {
            return true;
        }
        return false;
    }


    public String totalsOnly() {
        if (this.showTotalsOnly()) {
            return "true";
        }
        return "false";
    }


    public String totalToShow() {
        if (_totalToShow == null) {
            _totalToShow = (String)this.valueForBinding("totalToShow");
        }
        return _totalToShow;
    }


    public String singleTotal() {
        if(recordGroup() == null)
            return "";
        NSArray tots = this.recordGroup().totalList();

        if (tots != null && tots.count() > 0) {
            DRValue v = this.recordGroup().totalForKey(this.totalToShow());
            if(v != null) {
                double t = v.total();
                Number nm = new Double(t);
                NSNumberFormatter formatter = WRRecordGroup.formatterForFormat("#,###.00");
                return formatter.format(nm);
            }
        }

        return this.noTotalLabel();
    }


    public int nototalsrowspan() {
        return this.model().flatAttributeListTotal().count();
    }


    public boolean hDimsUsed() {
        if (this.model().hList().count() > 0) {
            return true;
        }
        return false;
    }


    public boolean useVerticalReportStyle() {
        String style = this.reportStyle();
        if ("VERTICAL_ROWS".equals(style)) {
            return true;
        }
        return false;
    }

    public NSDictionary totalDict() {
        if (_totalDict == null) {
            _totalDict = (NSDictionary)this.valueForBinding("totalDict");
        }
        return _totalDict;
    }

    public NSArray colors() {
        if (_colors == null) {
            _colors = (NSArray)this.valueForBinding("colors");
            if(_colors == null){
                _colors = new NSArray();
            }
        }
        return _colors;
    }

    public int totalCount() {
        //if (_totalCount = -1) {
            NSDictionary d = this.totalDict();
            if (d == null) {
                _totalCount = 0;
            } else {
                _totalCount = d.allKeys().count();
            }
        //}
        return _totalCount;
    }


    public boolean isNotTotalGroup() {
        if (this.totalCount() > 0) {
            return false;
        }
        return true;
    }


    public String colorForCoords() {
        //return @"ff0000";
        int tc = this.totalCount();
        int maxColorsConfigured = this.colors().count();

        if (tc == maxColorsConfigured) {
            return "eeeeee";
        }

        if (tc > maxColorsConfigured) {
            return "ffffff";
        }

        return (String)this.colors().objectAtIndex(tc);
    }


    public NSDictionary attributeListDict() {
        if (this.totalsOnly() != null) {
            return this.model().flatAttributeListTotalDict();
        }

        return this.model().flatAttributeDepthDict();
    }


    public int depthCount() {
        return this.attributeListDict().allKeys().count();
    }


    public int colspanForAllAttribs() {
        return this.model().flatAttributeList().count();
    }


    public void takeValuesFromRequest(WORequest r, WOContext c) {
        //Abort call to super to save all this processing time
    }


    public NSArray recordFlatValueList() {
        return record.flatValueList();
    }


}