// Generated by the WebObjects Wizard
package er.reporting.examples;

import er.reporting.*;
import er.grouping.*;

import com.webobjects.foundation.*;
import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import er.extensions.*;

public class Session extends ERXSession {
    private static er.extensions.ERXLogger log = er.extensions.ERXLogger.getERXLogger(Session.class);

    protected String selectedGroupingCriteriaString;
    protected DRReportModel reportModel; // report model for EOs
    protected DRReportModel reportModel2; // report model for raw row objects

    protected NSMutableArray attribArray; // for grouping of fetched EOs in memory
    protected NSMutableArray critArray; // for grouping of fetched EOs in memory
    protected NSArray attribArray2; // for grouping of returned raw rows from GROUP BY SQL
    protected NSArray critArray2; // for grouping of returned raw rows from GROUP BY SQL
    protected NSArray attribArray3; // for docs on using WRReportEditor
    protected NSArray critArray3; // 

    protected NSArray groupByRows; // raw rows fetched using GROUP BY SQL
    public NSArray objects; // EOs fetched with a fetch spec

    public Session(){
        super();
        getReportModelDefinitionFromString();
        creatingModelsProgrammatically();
        getObjects ();
        selectedGroupingCriteriaString = "category";
    }
    public void getReportModelDefinitionFromString(){
        String st = (String)WOApplication.application().valueForKey("modelDictString");
        NSDictionary m = DRReportModel.modelFromPlistString (st);
        critArray2 = (NSArray)m.objectForKey("GroupDef");
        attribArray2 = (NSArray)m.objectForKey("AttributeDef");
        log.debug("critArray2: "+ critArray2);
        
        st = (String)WOApplication.application().valueForKey("modelDictString2");
        m = DRReportModel.modelFromPlistString (st);
        critArray3 = (NSArray)m.objectForKey("GroupDef");
        attribArray3 = (NSArray)m.objectForKey("AttributeDef");
        log.debug("critArray3: "+ critArray3);
    }
    public void getObjects(){
        EODatabaseDataSource ds = new EODatabaseDataSource(defaultEditingContext(),"Movie");
        EOFetchSpecification fs = ds.fetchSpecification();
        fs.setPrefetchingRelationshipKeyPaths(new NSArray("studio"));
        objects = ds.fetchObjects();
        log.debug("getRawRows: objects: "+ objects.count());
    }
    public void getRawRows(){
        groupByRows = EOUtilities.rawRowsForSQL(
		defaultEditingContext(), 
		"Movies", 
		"select category as category, count(*) as cnt from MOVIE group by category"); 
        log.debug("getRawRows: groupByRows: "+ groupByRows);
    }

    public DRReportModel reportModel() {
        return reportModel;
    }
    public NSArray objects() {
        return objects;
    }
    
    
    
    
    
    
    
    public void creatingModelsProgrammatically() {
        DRAttribute attGrp;
        NSMutableArray subAttList = new NSMutableArray();
        NSMutableArray smcList = new NSMutableArray();
        NSMutableArray smcList2 = new NSMutableArray();
        NSMutableArray smcList3 = new NSMutableArray();
        
        critArray = new NSMutableArray();
        attribArray = new NSMutableArray();
        attribArray.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue", true, null));
        attribArray.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("title", null, "Title", false, null));
        attribArray.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("dateReleased", null, "Date Released", false, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("studio.name", null, "Studio Name1", false, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue2", true, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue3", true, null));
        attGrp = DRAttributeGroup.withKeyPathFormatLabelTotalListUserInfo("AGroupofAttributes", null, "A Group of Attributes", true, subAttList, null);
        attribArray.addObject(attGrp);
        subAttList = new NSMutableArray();
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("studio.name", null, "Studio Name2", false, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("title", null, "Revenue3", false, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue4", true, null));
        attGrp = DRAttributeGroup.withKeyPathFormatLabelTotalListUserInfo("AnInnerGroup", null, "An Inner Group", true, subAttList, null);
        subAttList = new NSMutableArray();
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("studio.name", null, "Studio Name3", false, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue2", true, null));
        subAttList.addObject(DRAttribute.withKeyPathFormatLabelTotalUserInfo("revenue", null, "Revenue3", true, null));
        subAttList.addObject(attGrp);
        attGrp = DRAttributeGroup.withKeyPathFormatLabelTotalListUserInfo("AnotherGroup", null, "Another Group", true, subAttList, null);
        attribArray.addObject(attGrp);
        //format:@"%Y"
        //possibleValuesUseType:_nil
        //possibleValues:_nil
        //possibleValues:[NSArray arrayWithObjects:@"1971", @"1976", _nil]
        smcList2.addObject(DRSubMasterCriteria.withKeyUseMethodUseTimeFormatFormatPossibleValuesUseTypeGroupEdgesPossibleValues("dateReleased", false, false, null, "useRange", true, new NSArray(new Object[]{new NSTimestamp().timestampByAddingGregorianUnits(-25, 0, 0, 0, 0, 0) , new NSTimestamp().timestampByAddingGregorianUnits(-11, 0, 0, 0, 0, 0)})));
        //possibleValuesUseType:_nil
        //possibleValues:_nil
        smcList.addObject(DRSubMasterCriteria.withKeyUseMethodUseTimeFormatFormatPossibleValuesUseTypeGroupEdgesPossibleValues("category", false, false, null, "usePredefined", false, new NSArray(new Object[]{"Action" , "Drama" , "Cult"})));
        //possibleValuesUseType:@"usePeriodic"
        smcList3.addObject(DRSubMasterCriteria.withKeyUseMethodUseTimeFormatFormatPossibleValuesUseTypeGroupEdgesPossibleValues("revenue", false, false, null, "useRange", true, new NSArray(new Object[]{(new Double(500.0)) , (new Double(500000.0)) , (new Double(10000000.0)) , (new Double(14400000.0))})));
        critArray.addObject(DRMasterCriteria.withSubMasterCriteriaUserInfo(smcList, null));
        critArray.addObject(DRMasterCriteria.withSubMasterCriteriaUserInfo(smcList2, null));
        critArray.addObject(DRMasterCriteria.withSubMasterCriteriaUserInfo(smcList3, null));
        
        String s = DRReportModel.pListStringAttributeListMasterCriteriaList(attribArray, critArray);
        
        DRReportModel.writeStringToDiskPathAtomically(s, "/tmp/testmodel.plist", true);
        log.debug("");
        log.debug("");
        log.debug("As String:"+s);
        /*
        log.debug("");
        log.debug("");
        log.debug("About to get model from this string");

        NSDictionary m = DRReportModel.modelFromPlistString (s);
        log.debug("m:"+m);

        log.debug("");
        log.debug("");
        log.debug("About to turn this model back into a string");
        String sagain = DRReportModel.pListStringAttributeListMasterCriteriaList(attribArray, critArray);
        log.debug("As String: sagain:"+sagain);
        log.debug("");
        log.debug("");
        */

    }


}
