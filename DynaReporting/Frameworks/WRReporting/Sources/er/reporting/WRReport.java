package er.reporting;

import er.grouping.*;
import java.lang.*;
import java.util.*;
import java.io.*;
import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import com.webobjects.appserver.*;
import er.extensions.*;

// Generated by the WebObjects Wizard Tue Nov 10 11:18:11 US/Central 1998
public class WRReport extends WOComponent  {

    protected DRReportModel _model;

    // iterators...
    protected DRGroup aGrp, hGroup, vGroup, zGroup;
    protected String areportStyle;
    protected int currentIndex, currentIndexV;
    protected int currentLevelV, currentLevel;
    protected int vheadingCount;
    protected int depth;
    protected String dispType;
    protected DRAttribute attrib;

    protected DRCriteria _topCriteriaV, _topCriteria;
    protected int _vheadingIndex;


    protected NSMutableDictionary _indexDict;
    protected NSMutableDictionary _currentZCriteria;
    protected NSArray _recordGroupDisplayTypes;
    protected NSArray _reportStyles;
    protected String _selectedReportStyle;
    protected String _selectedRecordGroupDisplayType;
    protected String _recordGroupTotalToShow;
    protected String _showRecordGroupAsTable;
    protected String _showRecordGroupHeadings;
    protected String _showPresentationControls;
    protected String _showEditing;

    protected String _showNavigation;
    protected NSArray _colorDict;
    //String _baseColor, _maxColor;
    //NSMutableDictionary _currCritDictCache;
    protected String _showCustomReportStyle;

    public WRReport(WOContext c) {
        super(c);
        _currentZCriteria = new NSMutableDictionary();
        _indexDict = new NSMutableDictionary();
        //_currCritDictCache = new NSMutableDictionary();
        //_baseColor = "d0cfbd";
        //_maxColor = "ffec00";
        _colorDict = null;
        _recordGroupDisplayTypes = new NSArray(new Object[]{"SINGLE_TOTAL" , "TABLE" , "TOTALS"});
        _reportStyles = new NSArray(new Object[]{"VERTICAL_ROWS" , "NESTED_CELLS"});
        
        Class arrClass [] = {NSNotification.class};
        NSNotificationCenter.defaultCenter().addObserver(this, new NSSelector("rebuildModel", arrClass), "DRReportModelRebuild", null);
    }
    
    public NSArray recordGroupDisplayTypes(){
        return _recordGroupDisplayTypes;
    }
    public NSArray reportStyles(){
        return _reportStyles;
    }


    public boolean synchronizesVariablesWithBindings() {
        return false;
    }

    public void awake() {
        _vheadingIndex = 0;
        _indexDict.removeAllObjects();
        _colorDict = null;
        //[_currentZCriteria removeAllObjects];
    }


    public void appendToResponse(WOResponse r, WOContext c) {
        _indexDict.removeAllObjects();
        //[_currentZCriteria removeAllObjects];
        _model = null;
        _colorDict = null;
        super.appendToResponse(r, c);
    }


    public void rebuildModel(NSNotification not) {
        _currentZCriteria.removeAllObjects();
    }


    public boolean showPresentationControls() {
        if (_showPresentationControls == null) {
            Object v = (Object)this.valueForBinding("showPresentationControls");
            if (ERXValueUtilities.booleanValue(v)) {
                _showPresentationControls = "true";
            }else {
                _showPresentationControls = "false";
            }
        }
        return _showPresentationControls.equals("true");
    }


    public String selectedRecordGroupDisplayType() {
        if (_selectedRecordGroupDisplayType == null) {
            _selectedRecordGroupDisplayType = (String)this.valueForBinding("selectedRecordGroupDisplayType");
            if (_selectedRecordGroupDisplayType == null) {
                _selectedRecordGroupDisplayType = "TOTALS";
            }
        }
        return _selectedRecordGroupDisplayType;
    }
    public void setSelectedRecordGroupDisplayType(String v) {
        _selectedRecordGroupDisplayType = v;
    }


    public String selectedReportStyle() {
        if (_selectedReportStyle == null) {
            _selectedReportStyle = (String)this.valueForBinding("selectedReportStyle");
            if (_selectedReportStyle == null) {
                _selectedReportStyle = "NESTED_CELLS";
            }
        }
        return _selectedReportStyle;
    }
    public void setSelectedReportStyle(String v) {
        _selectedReportStyle = v;
    }


    public boolean showVerticalRows() {
        if (this.selectedReportStyle().equals("VERTICAL_ROWS") && !this.showRGAsTable() && this.selectedRecordGroupDisplayType().equals("TABLE")) {
            return true;
        }

        return false;
    }


    public String recordGroupTotalToShow() {
        if (_recordGroupTotalToShow == null) {
            _recordGroupTotalToShow = (String)this.valueForBinding("recordGroupTotalToShow");
            if (_recordGroupTotalToShow == null) {
                _recordGroupTotalToShow = "description";
            }
        }
        return _recordGroupTotalToShow;
    }
    public void setRecordGroupTotalToShow(String v) {
        _recordGroupTotalToShow = v;
    }


    public boolean showRGHeadings() {
        if (this.showRecordGroupHeadings().equals("true")) {
            return true;
        }
        return false;
    }
    public void setShowRGHeadings(boolean v) {
        if (v) {
            _showRecordGroupHeadings = "true";
        } else {
            _showRecordGroupHeadings = "false";
        }
    }


    public boolean showRGAsTable() {
        if (this.showRecordGroupAsTable().equals("true")) {
            return true;
        }
        return false;
    }
    public void setShowRGAsTable(boolean v) {
        if (v) {
            _showRecordGroupAsTable = "true";
        } else {
            _showRecordGroupAsTable = "false";
        }
    }


    public String showCustomReportStyle() {
        if (_showCustomReportStyle == null) {
            if (!this.hasBinding("showCustomReportStyle")) {
                _showCustomReportStyle = "false";
            } else {
                Object v = (Object)this.valueForBinding("showCustomReportStyle");
                if (ERXValueUtilities.booleanValue(v)) {
                    _showCustomReportStyle = "true";
                }else {
                    _showCustomReportStyle = "false";
                }
            }
        }
        return _showCustomReportStyle;
    }


    public void setShowCustomReportStyle(String v) {
        _showCustomReportStyle = v;
    }



    public boolean showDefaultReportStyleBool() {
        if ("true".equals(showCustomReportStyle())) {
            return true;
        }
        return false;
    }


    public void setShowDefaultReportStyleBool(boolean v) {
        if (v) {
            this.setShowCustomReportStyle("true");
        } else {
            this.setShowCustomReportStyle("false");
        }
    }


    public String showRecordGroupHeadings() {
        if (_showRecordGroupHeadings == null) {
            if (!this.hasBinding("showRecordGroupHeadings")) {
                _showRecordGroupHeadings = "true";
            } else {
                Object v = (Object)this.valueForBinding("showRecordGroupHeadings");
                if (ERXValueUtilities.booleanValue(v)) {
                    _showRecordGroupHeadings = "true";
                }else {
                    _showRecordGroupHeadings = "false";
                }

            }
        }
        return _showRecordGroupHeadings;
    }
    public void setShowRecordGroupHeadings(String v) {
        _showRecordGroupHeadings = v;
    }


    public String showRecordGroupAsTable() {
        if (_showRecordGroupAsTable == null) {
            if (this.hasBinding("showRecordGroupAsTable")) {
                _showRecordGroupAsTable = "false";
            } else {
                Object v = (Object)this.valueForBinding("showRecordGroupAsTable");
                if (ERXValueUtilities.booleanValue(v)) {
                    _showRecordGroupAsTable = "true";
                }else {
                    _showRecordGroupAsTable = "false";
                }
            }
        }
        return _showRecordGroupAsTable;
    }
    public void setShowRecordGroupAsTable(String v) {
        _showRecordGroupAsTable = v;
    }


    public boolean showTotalsOnlyAsCells() {
        if (this.selectedRecordGroupDisplayType().equals("TOTALS") && !this.showRGAsTable()) {
            return true;
        }
        return false;
    }


    public boolean showAsCells() {
        if (!this.showRGAsTable() && !this.selectedRecordGroupDisplayType().equals("SINGLE_TOTAL") && !this.selectedRecordGroupDisplayType().equals("TABLE")) {
            return true;
        }
        return false;
    }

    public boolean showEditing() {
        if(_showEditing == null){
            Object v = (Object)this.valueForBinding("showEditing");
            if (ERXValueUtilities.booleanValue(v)) {
                _showEditing = "true";
            }else {
                _showEditing = "false";
            }
        }
        if(_showEditing.equals("true")) return true;
        return false;
    }


    public boolean showNavigation() {
        if (_showNavigation ==null) {
            Object v = (Object)this.valueForBinding("showNavigation");
            if (ERXValueUtilities.booleanValue(v)) {
                _showNavigation = "true";
            }else {
                _showNavigation = "false";
            }
        }

        if (_showNavigation.equals("true")) {
            return true;
        }

        return false;
    }
    public void setShowNavigation(boolean v) {
        if (v) {
            _showNavigation = "true";
        } else {
            _showNavigation = "false";
        }
    }


    public DRReportModel model() {
        if (_model == null) {
            _model = (DRReportModel)this.valueForBinding("model");
        }
        return _model;
    }


    public boolean showSingleRow() {
        if (this.model().vList().count() > 0) {
            return false;
        }
        return true;
    }


    public boolean showSingleCol() {
        if (this.model().hList().count() > 0) {
            return false;
        }
        return true;
    }


    public boolean showNoColNoRow() {
        if (this.showSingleRow() && this.showSingleCol()) {
            return true;
        }
        return false;
    }


    public NSArray zDimensions() {
        return this.model().zList();
    }


    public NSArray horzDimensions() {
        return this.model().hList();
    }


    public NSArray vertDimensions() {
        return this.model().vList();
    }


    public NSArray topHorzGroupCriteriaList() {
        NSArray arr = this.model().hList();
        if (arr.count() > 0) {
            DRGroup grp = (DRGroup)arr.objectAtIndex(0);
            NSArray arr2 = grp.sortedCriteriaList();
            //log.debug( "arr2:"+arr2);
            return arr2;
        }
        return NSArray.EmptyArray;
    }


    public NSArray topVertGroupCriteriaList() {
        NSArray arr = this.model().vList();
        if (arr.count() > 0) {
            DRGroup grp = (DRGroup)arr.objectAtIndex(0);
            return grp.sortedCriteriaList();
        }
        return NSArray.EmptyArray;
    }


    public int colSpanForHorzList() {
        return this.model().spanForVListIndexAsCellsShowHeadingShowTotals(false, currentLevel-1, this.showAsCells(), this.showRGHeadings(), this.selectedRecordGroupDisplayType().equals("TOTALS"));
    }


    public int horzColSpan() {
        return this.colSpanForHorzList();
    }


    public NSArray vertSubList() {
        DRMasterCriteria masterCritForCrit = topCriteriaV().masterCriteria();
        DRGroup drg = (DRGroup)this.model().vList().lastObject();
        
        if(drg != null){
            DRMasterCriteria bottomMasterCrit = drg.masterCriteria();
            if (masterCritForCrit.equals(bottomMasterCrit)) {
                return null;
            }
        }
        DRGroup innerGroup = (DRGroup)this.model().vList().objectAtIndex(currentLevelV - 1);
        return innerGroup.sortedCriteriaList();
    }


    public DRCriteria topCriteria() {
        //log.debug( "_topCriteria:"+_topCriteria);
        return _topCriteria;
    }
    public void setTopCriteria(DRCriteria c) {
        //log.debug( "c:"+c);
        if(c != null){
            String ky = c.masterCriteria().label();
            //log.debug( "ky:"+ky);
            if (ky != null) {
                _currentZCriteria.setObjectForKey(c, ky);
            }
        }
        _topCriteria = c;
    }


    public NSArray horzSubList() {
        // current DRGroup for row is: hGroup
        // current DRCriteria for nesting is: topCriteria
        // need list of sub criteria if any give the above
        DRGroup innerGroup;
        DRMasterCriteria masterCritForCrit = topCriteria().masterCriteria();
        if (masterCritForCrit.equals(hGroup.masterCriteria())) {
            return null;
        }
        innerGroup = (DRGroup)this.model().hList().objectAtIndex(currentLevel-1);
        return innerGroup.sortedCriteriaList();
    }


    public NSArray horzSubList2() {
        DRMasterCriteria masterCritForCrit = topCriteria().masterCriteria();
        DRGroup grp = (DRGroup)this.model().hList().lastObject();
        DRMasterCriteria bottomMasterCrit = grp.masterCriteria();

        if (masterCritForCrit.equals(bottomMasterCrit)) {
            return null;
        }

        DRGroup innerGroup = (DRGroup)this.model().hList().objectAtIndex(currentLevel-1);
        return innerGroup.sortedCriteriaList();
    }


    public NSDictionary addCoordsFrom(NSMutableDictionary currCritDict) {
        NSMutableDictionary dict = new NSMutableDictionary();
        Enumeration en = this.model().groups().objectEnumerator();
        //log.debug( "currCritDict:"+currCritDict);

        while (en.hasMoreElements()) {
            DRGroup grp = (DRGroup)en.nextElement();
            DRMasterCriteria dmc = grp.masterCriteria();
            DRCriteria crt = (DRCriteria)currCritDict.objectForKey(dmc.label());
            dict.setObjectForKey(crt, dmc.keyDesc());

            if (crt.isTotal()) {
                NSMutableDictionary d = (NSMutableDictionary)dict.objectForKey("isTotal");

                if (d == null) {
                    d = new NSMutableDictionary();
                    dict.setObjectForKey(d, "isTotal");
                }

                d.setObjectForKey("true", dmc.keyDesc());
            }

        }

        return dict;
    }


    public NSDictionary currentCoordinates() {
        NSDictionary dict = this.addCoordsFrom(_currentZCriteria);
        return dict;
    }


    public DRRecordGroup recordGroupTest() {
        //log.debug( "entered");
        NSDictionary crds = this.currentCoordinates();
        //log.debug( "crds:"+crds);
        DRRecordGroup drg =  this.model().recordGroupForCoordinates(crds);
        //log.debug( "drg:"+drg);
        return drg;
    }


    public DRCriteria topCriteriaV() {
        return _topCriteriaV;
    }
    public void setTopCriteriaV(DRCriteria c) {
        if(c != null){
            String ky = c.masterCriteria().label();
            if (ky != null) {
                _currentZCriteria.setObjectForKey(c, ky);
            }
        }
        _topCriteriaV = c;
    }


    public String topCriteriaVLabel() {
        return topCriteriaV().label();
    }


    public int vheadingCount() {
        return this.model().vList().count()-1;
    }


    public int vheadingIndex() {
        return _vheadingIndex;
    }


    public void setVheadingIndex(int indx) {
        _vheadingIndex = indx;
    }


    public int vertRowSpan() {
        return this.model().spanForVListIndexAsCellsShowHeadingShowTotals(true, vheadingIndex(), !this.showRGAsTable(), this.showRGHeadings(), this.selectedRecordGroupDisplayType().equals("TOTALS"));
    }


    public boolean showIndentCell() {
        int oldCnt;
        Number oldCount = (Number)_indexDict.objectForKey(new Integer(vheadingIndex()));

        if (oldCount == null) {
            oldCnt = 0;
        } else {
            int span = this.model().spanForVListIndexAsCellsShowHeadingShowTotals(true, vheadingIndex(), !this.showRGAsTable(), this.showRGHeadings(), this.selectedRecordGroupDisplayType().equals("TOTALS"));
            oldCnt = oldCount.intValue();
            oldCnt++;

            if (oldCnt > (span-1)) {
                oldCnt = 0;
            }

        }

        _indexDict.setObjectForKey(new Integer(oldCnt), new Integer(vheadingIndex()));

        if (oldCnt == 0) {
            return true;
        }

        return false;
    }


    public String vIndentCriteriaLabel() {
        DRGroup grp = (DRGroup)this.model().vList().objectAtIndex(vheadingIndex());
        String ky = grp.masterCriteria().label();
        DRCriteria crt = (DRCriteria)_currentZCriteria.objectForKey(ky);
        return crt.label();
    }

    public WOComponent regenReport() {
        return null;
    }


    public int numberOfCrits() {
        int nm = 1;
        Enumeration en = this.model().hList().objectEnumerator();
        //log.debug( "this.model().hList():"+this.model().hList());

        while (en.hasMoreElements()) {
            DRGroup grp = (DRGroup)en.nextElement();
            nm = nm*grp.sortedCriteriaList().count();
        }

        //log.debug( "nm:"+nm);
        return nm;
    }


    public boolean showHeadersForAsCells() {
        if (this.showRGHeadings() && this.showTotalsOnlyAsCells()) {
            return true;
        }

        return false;
    }


    public NSDictionary attributeListDict() {
        return this.model().flatAttributeListTotalDict();
    }


    public int depthCount() {
        //log.debug( "this.attributeListDict().allKeys().count():"+this.attributeListDict().allKeys().count());
        //log.debug( "this.attributeListDict().allKeys().count():"+this.attributeListDict());
        return this.attributeListDict().allKeys().count();
    }


    public int colspanAddition() {
        int count = this.model().vList().count();
        return count - currentLevelV;
    }


    public int depthCountAllAttribs() {
        return this.model().flatAttributeList().count()+this.model().vList().count() - vheadingIndex();
    }


    public int indentCellCount() {
        return currentLevelV;
    }


    public boolean showVHeadings() {
        if (vheadingIndex() == 0) {
            return true;
        }

        return false;
    }


    public NSArray attributeListAtDepth() {
        Number ky = new Integer(depth);
        //log.debug( "ky:"+ky);
        NSArray a = (NSArray)this.attributeListDict().objectForKey(ky);
        //log.debug( "a:"+a);
        return a;
    }


    public int colSpan() {
        int cls = attrib.flatAttributesTotal().count();
        if (attrib.showTotal()) {
            cls = cls+1;
        }
        //log.debug( "cls:"+cls);
        return cls;
    }


    public int rowSpan() {
        //flatAttributes
        int rs = 1;
        if (!attrib.isGroup()) {
            rs = this.depthCount()-depth;
        }
        //log.debug( "rs:"+rs);
        return rs;
    }


    public String attribLabel() {
        return attrib.label();
    }


    public DRAttribute attrib() {
        return attrib;
    }


    public void setAttrib(DRAttribute at) {
        attrib = at;
    }


    public DRGroup aGrp() {
        return aGrp;
    }


    public void setAGrp(DRGroup gp) {
        aGrp = gp;
    }


    public boolean shouldTotalCheck() {
        return aGrp.useGroupTotal();
    }
    public void setShouldTotalCheck(boolean v) {
        if (v) {
            aGrp.setUseGroupTotal(true);
        } else {
            NSArray srtdList = aGrp.sortedCriteriaList();
            aGrp.setUseGroupTotal(false);
            _currentZCriteria.setObjectForKey(srtdList.objectAtIndex(0), aGrp.masterCriteria().label());
        }

    }


    public NSDictionary totalDict() {
        NSDictionary dict = this.currentCoordinates();
        NSDictionary totalDict = (NSDictionary)dict.objectForKey("isTotal");
        return totalDict;
    }


    public int totalCount() {
        NSDictionary totalDict = this.totalDict();
        
        if (totalDict == null) {
            return 0;
        }

        int totalCount = totalDict.allKeys().count();
        return totalCount;
    }


    public String colorForCoords() {
        int totalCount = this.totalCount();
        int maxColorsConfigured = this.colorDict().count();

        if (totalCount == maxColorsConfigured) {
            return "eeeeee";
        }

        if (totalCount > maxColorsConfigured) {
            return "ffffff";
        }

        return (String)this.colorDict().objectAtIndex(totalCount);
    }


    public String bgcolorColSpanTd() {
        return this.colorForCoords();
    }


    public String bgcolorRowSpanTd() {
        return this.colorForCoords();
    }

    /*
    public int hexstringToInt(String str) {
        String base = "0x";
        String hexs = base.concat(str);
        long n = this.strtoul(hexs.toCharArray(), (char)null, 16);
        int i = (int)n;
        return i;
    }
    */


    public NSArray colorDict() {
        if (_colorDict == null) {
            if (!this.hasBinding("colors")) {
                _colorDict = new NSArray(new Object[]{"c6c3af" , "b7af4b" , "d5ba27" , "ffec00"});
                //@"a3a18d"
            } else {
                _colorDict = (NSArray)this.valueForBinding("colors");
            }

            /*
            int i;
            int numOfGroups = [[[self model] groups] count];
            int maxColorAsNumber = [self hexstringToInt:_maxColor];
            int minColorAsNumber = [self hexstringToInt:_baseColor];
            int colorDelta = maxColorAsNumber - minColorAsNumber;
            double colorInterval = (double)colorDelta/(double)numOfGroups;
            NSMutableArray *arr = [NSMutableArray array];
            for(i=0;i< numOfGroups; i++){
                    int colorAsDecimal = i* colorInterval + minColorAsNumber;
                    NSString * colorHexString = [NSString stringWithFormat:@"%x", colorAsDecimal];
                    [arr addObject:colorHexString];
            }
            //NSLog(@"buildColorDict: %@", arr);
            colorDict = [[NSArray arrayWithArray:arr] retain];
	*/
        }

        return _colorDict;
    }


    public int vheadingCount2() {
        return this.model().vList().count();
    }


}