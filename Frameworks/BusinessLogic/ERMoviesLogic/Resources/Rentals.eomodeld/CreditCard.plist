{
    attributes = (
        {
            columnName = "AUTHORIZATION_DATE"; 
            externalType = timestamp; 
            name = authorizationDate; 
            prototypeName = dateTime; 
            valueType = T; 
        }, 
        {
            columnName = "AUTHORIZATION_NUM"; 
            externalType = char; 
            name = authorizationNum; 
            prototypeName = varchar10; 
        }, 
        {
            columnName = "CARD_NUMBER"; 
            externalType = char; 
            name = cardNumber; 
            prototypeName = varchar16; 
            width = 25; 
        }, 
        {
            allowsNull = N; 
            columnName = "CUSTOMER_ID"; 
            externalType = integer; 
            name = customerID; 
            prototypeName = id; 
        }, 
        {
            columnName = "EXPIRATION_DATE"; 
            externalType = timestamp; 
            name = expirationDate; 
            prototypeName = dateTime; 
        }, 
        {
            columnName = CLIMIT; 
            externalType = decimal; 
            name = limit; 
            precision = 10; 
            prototypeName = amount; 
        }
    ); 
    attributesUsedForLocking = (
        cardNumber, 
        expirationDate, 
        authorizationNum, 
        authorizationDate, 
        limit, 
        customerID
    ); 
    className = "webobjectsexamples.businesslogic.rentals.common.CreditCard"; 
    classProperties = (
        cardNumber, 
        expirationDate, 
        authorizationNum, 
        authorizationDate, 
        limit, 
        customer
    ); 
    externalName = creditcard; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (
            expirationDate, 
            authorizationNum, 
            authorizationDate, 
            limit, 
            customer, 
            cardNumber
        ); 
        "_javaClientClassName" = "webobjectsexamples.businesslogic.rentals.common.CreditCard"; 
        "_nameInObjectStore" = "CREDIT_CARD"; 
    }; 
    name = CreditCard; 
    primaryKeyAttributes = (customerID); 
    relationships = (
        {
            destination = Customer; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = customerID; sourceAttribute = customerID; }); 
            name = customer; 
        }
    ); 
}
