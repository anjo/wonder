// Generated by the WebObjects Wizard

package com.uw.shared;

import com.webobjects.foundation.*;
import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import java.io.*;

public class UWApplication extends WOApplication { 

    public WOResponse handleSessionRestorationErrorInContext(WOContext aContext) {
        return pageWithName("Main",aContext).generateResponse();
    }

    public NSTimestamp todaysDate() {
        return new NSTimestamp();
    }


    // overridden because sometimes there are malformed cookies that throw exceptions in WO 5.1.x
    // it can be commented out in 5.2
    public WOResponse dispatchRequest(WORequest aRequest) {
        /* this piece of code solves several problems with cookies in 5.1.x
        1. does not include cookies that have multiple = signs
        2. does not include cookies that have no cookie value
        3. ensures cookie keys are unique */

        String cHeader = aRequest.headerForKey("cookie");

        if (cHeader!=null) {


            // we use a dictionary to ensure that all cookie keys are unique
            NSMutableDictionary cookieDictionary = new NSMutableDictionary();

            // parse and reconstruct cookie header removing any malformed cookies
            StringReader stringReader = new StringReader(cHeader);
            StreamTokenizer tokenizer = new StreamTokenizer(stringReader);

            // set up the tokenizer
            tokenizer.resetSyntax();
            tokenizer.wordChars(' ','~');
            tokenizer.whitespaceChars(';',';');
            tokenizer.eolIsSignificant(true);


            int token=0;
            try {
                token = tokenizer.nextToken();
            }
            catch (Exception e) {
                System.out.println(e);
                return null;
            }

            // continue to read tokens until the End of File is encountered
            while (token == tokenizer.TT_WORD) {

                try {
                    String currentCookie = tokenizer.sval.trim();
                    
                    if (currentCookie.indexOf('=')==currentCookie.lastIndexOf('=',currentCookie.length())) {
                        int equalsIndex = currentCookie.indexOf('=');
                        String cookieHeader = currentCookie.substring(0,equalsIndex).trim();
                        String cookieValue = currentCookie.substring(equalsIndex+1,currentCookie.length()).trim();

                        if (cookieValue.length()>0) {
                            cookieDictionary.takeValueForKey(cookieValue,cookieHeader);
                        }
                    }

                    token = tokenizer.nextToken();

                }
                catch (Exception e) {
                    System.out.println(e);
                    return null;
                }
            }

            String cookieString = cookieDictionary.toString();
            aRequest.setHeader(cookieString.substring(1,cookieString.length()-1),"cookie");

        }
        return super.dispatchRequest(aRequest);
    }


}
