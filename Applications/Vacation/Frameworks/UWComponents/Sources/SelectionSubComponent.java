
package com.uw.shared;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import com.webobjects.appserver.*;

/*when using this subcomponent, the class handled by must implement SelectionInterface.java
If using a displaygroup, you'll need to subclass WODIsplayGroup so that it can implement the interface.
*/

// Generated by the WebObjects Wizard Thu May 18 10:47:50 US/Eastern 2000
public class SelectionSubComponent extends WOComponent {

    public SelectionSubComponent (WOContext aContext) {
        super(aContext);
    }

    public WODisplayGroup groupToUse;
    public NSArray arrayToUse;
    public EOEditingContext localContext;
    public String parentActionForRefresh;

    public NSArray dataSet() {
        if (groupToUse != null) {
            return groupToUse.displayedObjects();
        } else {
            if (arrayToUse != null) {
                return arrayToUse;
            } else {
                return null;
            }

        }

    }


    public WOComponent clearSelected() {
        int i;

        for (i = 0; i < this.dataSet().count(); i++) {
            ((SelectionInterface) this.dataSet().objectAtIndex(i)).setSelected(0);
        }

        return null;
    }


    public WOComponent selectAll() {
        int i;

        for (i = 0; i < this.dataSet().count(); i++) {
            ((SelectionInterface) this.dataSet().objectAtIndex(i)).setSelected(1);
        }

        return null;
    }


    public WOComponent deleteSelected() {
        int i;
        localContext.revert();	// clear the context first

        for (i = 0; i < this.dataSet().count(); i++) {
            EOCustomObject current = (EOCustomObject) this.dataSet().objectAtIndex(i);

            if (((SelectionInterface) current).selected() != 0) {
                localContext.deleteObject(current);
            }

        }

        try {
            localContext.saveChanges();
            localContext.invalidateAllObjects();
        } catch(Throwable localException) {
            System.out.println (localException.getMessage());
        }

        if (parentActionForRefresh!=null)
            performParentAction(parentActionForRefresh);

        return null;
    }


}