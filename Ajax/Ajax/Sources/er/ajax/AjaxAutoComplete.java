package er.ajax;
// Generated by the WOLips Templateengine Plug-in at 26.03.2006 00:34:08

import java.text.*;
import java.util.*;

import org.json.*;

import com.metaparadigm.jsonrpc.*;
import com.webobjects.appserver.*;
import com.webobjects.appserver._private.*;
import com.webobjects.foundation.*;

public class AjaxAutoComplete extends AjaxComponent {

    public String divName;
    public String fieldName;
    
    public AjaxAutoComplete(WOContext context) {
        super(context);
    }
    
    public void awake() {
        super.awake();
        divName = scriptBaseName() + "_div";
        fieldName = scriptBaseName() + "_field";
    }

    /**
     * Overridden because the component is stateless
     */
    public boolean isStateless() {
        return true;
    }

    /**
     * Overridden because the component does not synch with the bindings.
     */
    public boolean synchronizesVariablesWithBindings() {
        return false;
    }
 
    public void appendToResponse(WOResponse res, WOContext ctx) {
        super.appendToResponse(res, ctx);
        String actionUrl = context().componentActionURL();
        res.appendContentString("<script type=\"text/javascript\"><!--\n" 
                +"new Ajax.Autocompleter('"+fieldName+"', '"+divName+"', '"+actionUrl+"', {})"
                +"//--></script>");
    }

    protected void addRequiredWebResources(WOResponse res) {
        addScriptResourceInHead(res, "prototype.js");
        addScriptResourceInHead(res, "scriptaculous.js");
        addScriptResourceInHead(res, "effects.js");
        addScriptResourceInHead(res, "builder.js");
        addScriptResourceInHead(res, "dragdrop.js");
        addScriptResourceInHead(res, "controls.js");
    }

    protected WOActionResults handleRequest(WORequest request, WOContext context) {

        String inputString = request.contentString();
        log.warn("Recv: " + inputString);
        setValueForBinding(context.request().stringFormValueForKey(fieldName), "value");
        NSArray values = (NSArray) valueForBinding("list");
        if(!hasBinding("item")) {
            WOResponse response = createResponse(!hasBinding("item") ? null : context);
            StringBuffer output = new StringBuffer();
            output.append("<ul>");
            if(values != null && values.count() > 0) {
                output.append("<li>");
                output.append(values.componentsJoinedByString("</li><li>"));
                output.append("</li>");
            }
            output.append("</ul>");
            response.appendContentString(output.toString());
            return response;
        } else {
            WOResponse response = createResponse(context);
            response.appendContentString("<ul>");
            WOElement child = _childTemplate();
            if(child != null) {
                for(Enumeration e = values.objectEnumerator(); e.hasMoreElements();) {
                    setValueForBinding(e.nextElement(), "item");
                    response.appendContentString("<li>");
                    context._setCurrentComponent(parent());
                    child.appendToResponse(response, context);
                    context._setCurrentComponent(this);
                    response.appendContentString("</li>");
                }
            }
            response.appendContentString("</ul>");
            return response;
        }
    }
}